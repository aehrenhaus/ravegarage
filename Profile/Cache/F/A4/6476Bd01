function ajaxSelectionGrid(ctl, ctlID, indentationStr)
{
	var searchText = ctl.value.toLowerCase();
	var listCtl = document.getElementById(ctlID);
	if (listCtl == null)
	{
		return;
	}
	for (var i = 0; i < listCtl.options.length; i++)
	{
		var selStr = listCtl.options[i].text.toLowerCase();
		
		if (indentationStr != null && indentationStr.length > 0)
		{
			do
			{
				if (selStr.indexOf(indentationStr) == 0) //remove indentation
				{
					selStr = selStr.slice(indentationStr.length);
				} else
				{
					break;
				}
			} while (true);
		}
		
		if (searchText.length == 0 || selStr.indexOf(searchText) == 0)
		{
			showCheckbox(ctlID, i, true);
		}
		else
		{
			showCheckbox(ctlID, i, false);
		} 
	}
}

function ajaxSelectionGridGetSearchText(ctlID)
{
	var searchTextBox = document.getElementById(ctlID + "_SearchTxt");

	return searchTextBox.value;
}

function ajaxSelectionGridSelectAll(ctlID, checked)
{
	var listCtl = document.getElementById(ctlID);
	var reflectedCtl = document.getElementById(ctlID + "_ReflectedListBox");
	var selAll = document.getElementById(ctlID + "_SelectAll");
	if (checked)
	{	
		selAll.title = document.UnselectAllStr;
	}
	else
	{
		selAll.title = document.SelectAllStr;
	}
	
	for (var i = 0; i < reflectedCtl.options.length; i++)
	{
		if (selectCheckbox(ctlID, ctlID + "_FrontEndCBList_" + i.toString(), checked))
		{
			if (checked)
			{
				appendToListbox(listCtl, reflectedCtl.options[i].value, reflectedCtl.options[i].text);
				listCtl.options[listCtl.options.length - 1].selected = true;
			}
			else
			{
				for (var n = listCtl.options.length - 1; n >= 0; n--)
				{
					if (reflectedCtl.options[i].value == listCtl.options[n].value)
					{
						listCtl.options[n] = null;
					}
				}
			}
		}
	}
	
	ajaxSelectionGridShowSelectedName(ctlID);
}

function appendToListbox(select, value, text)
{
	var opt;
	opt = document.createElement("option");
	opt.value = value;
	opt.appendChild(document.createTextNode(text));
	select.appendChild(opt);
}

function clearSelections(ctlID)
{
	var listCtl = document.getElementById(ctlID);
	var reflectedCtl = document.getElementById(ctlID + "_ReflectedListBox");
	if (listCtl == null || reflectedCtl == null)
	{
		return;
	}
	for (var ref = 0; ref < reflectedCtl.options.length; ref++)
	{
		if (selectCheckbox(ctlID,i,false))
		{
			for (var i = listCtl.options.length - 1; i >= 0; i--)
			{
				if (reflectedCtl.options[ref].value == listCtl.options[i].value)
				{
					listCtl.remove(i);
				}
			}	
		}
	}
}

function ajaxSelectionGridDoShowing(ctlID)
{
	var img = document.getElementById(ctlID + "_ShowHideBtn");
	if (img == null) //not a searchlist.
	{
		return;
	}
	
	var div = document.getElementById(ctlID + "_div");
	var hideImg = document.getElementById(ctlID + "_HideImg").value;
	div.style.display = 'block';
	img.src = hideImg;
}

function ajaxSelectionGridDoHiding(ctlID)
{
	var div = document.getElementById(ctlID + "_div");
	var showImg = document.getElementById(ctlID + "_ShowImg").value;
	var img = document.getElementById(ctlID + "_ShowHideBtn");
	div.style.display = 'none';
	img.src = showImg;
}

function showHide(ctlID)
{
	var div = document.getElementById(ctlID + "_div");
	if (div.style.display == 'none')
	{
		var isValid = document.getElementById(ctlID + '_DataValid').value == "true"; 
		
		if (isValid) //if we have valid data, show it right away
		{
			ajaxSelectionGridDoShowing(ctlID);
		} 
		return !isValid; //if it returns false, the Ajax handler won't re-populate.
	} else
	{
		ajaxSelectionGridDoHiding(ctlID);
		return false;
	}
}

function ajaxSelectionGridShow(ctlID, show)
{
	var img = document.getElementById(ctlID + "_ShowHideBtn");
	if (img == null) //not a AjaxSelectionGrid
	{
		return;
	}
	
	if (!show)
	{
		img.src = document.getElementById(ctlID + "_ShowImg").value;;
		img.disabled = true;
		var div = document.getElementById(ctlID + "_div");
		div.style.display = 'none';
	} //TODO: show
}

function ajaxSelectionGridSetDataValid(ctlID, valid, forgetSelections)
{
	var dataValid = document.getElementById(ctlID + '_DataValid');
	if (dataValid == null)
	{
		return false;
	}
	if (valid)
	{
		dataValid.value = "true";
	} else
	{
		dataValid.value = "false";

		if (forgetSelections)
		{
			ajaxSelectionGridForgetSelections(ctlID);
		}
		ajaxSelectionGridClearSearch(ctlID);
		ajaxSelectionGridSetPageMode(ctlID, false);
		ajaxSelectionGridGoToPage(ctlID, 1);
	}

	return true;
	
}

function initializeAllAjaxSelectionGrids()
{
	var ajaxSelectionGrids = document.getElementsByTagName("searchlist");
}

function showCheckbox(ctlID, index, show)
{
	var cb = document.getElementById(ctlID + "_FrontEndCBList_" + index.toString() + "_TR");
	if (cb != null)
	{
		cb.style.visibility = show ? "visible" : "collapse";
	}
}

function getLinkElement(ctlID, pageNumber)
{
	return document.getElementById(ctlID + "_PageLink:" + pageNumber.toString());
}

function manageLinkBar(ctlID, targetPage) //page numbers are 1-based.
{
	var targetPageNumber;
	if (targetPage == null || isNaN(targetPage))
	{
		targetPageNumber = 1;
	} else
	{
		targetPageNumber = targetPage;
	}
	ajaxSelectionGridSetCurrentPage(ctlID, targetPageNumber);
	var selAll = document.getElementById(ctlID + "_SelectAll");
	if(selAll != null){
		selAll.checked = false;
		selAll.title = document.SelectAllStr;
	}
	var totalPages = ajaxSelectionGridGetTotalPages(ctlID);
	document.getElementById(ctlID + "_PageLink:First").style.display = targetPageNumber < 3 ? 'none' : 'block';
	document.getElementById(ctlID + "_PageLink:Prev").style.display = targetPageNumber == 1 ? 'none' : 'block';
	document.getElementById(ctlID + "_PageLink:Last").style.display = targetPageNumber > totalPages - 2 ? 'none' : 'block';
	document.getElementById(ctlID + "_PageLink:Next").style.display = targetPageNumber >= totalPages ? 'none' : 'block'; //">=" because totalpages can be 0
	var pageOfPages = Math.floor((targetPageNumber - 1)/maxPageLinks); //0-based.
	if (getLinkElement(ctlID, targetPageNumber) == null) //going to a new pageOfPages; redo links
	{
		var pageOffset = -1;
		var linkExits;
		do
		{
			pageOffset++;
			linkExists = getLinkElement(ctlID, pageOffset*maxPageLinks + 1);
		} while (linkExists == null)
		
		for (var i = 1; i <= maxPageLinks; i++)
		{
			var oldPage = i + pageOffset * maxPageLinks;
			var thisLink = getLinkElement(ctlID, oldPage);
			var thisPageNumber = i + pageOfPages*maxPageLinks;
			thisLink.style.display = thisPageNumber > totalPages ? 'none' : 'block';
			thisLink.id = ctlID + "_PageLink:" + thisPageNumber.toString();
			thisLink.innerHTML = thisPageNumber.toString();
		}
	}
	for (var i = 1; i <= maxPageLinks; i++)
	{
		var pageNumber = i + pageOfPages*maxPageLinks;
		var link = getLinkElement(ctlID, pageNumber);
		link.style.textDecoration = pageNumber == targetPageNumber ? '' : 'underline';
		link.style.color = pageNumber == targetPageNumber ? 'black' : 'blue';
		link.style.display = pageNumber > totalPages ? 'none' : 'block';
	}
}

function ajaxSelectionGridGoToSelectedPage(ctlID, pageNumber)
{
	var selOnly = ajaxSelectionGridPageModeIsSelectedOnly(ctlID);
	
	if( ! selOnly)
	{
		alert("ajaxSelectionGridGoToSelectedPage() can only be called when selOnly is true");
		return;
	}
	
	clearCheckboxes(ctlID);
	
	var mainCtl = document.getElementById(ctlID);
	var itemsPerPage = ajaxSelectionGridGetItemsPerPage(ctlID);
	var firstItemInd = itemsPerPage * (pageNumber - 1)
	var iLimit = Math.min(mainCtl.options.length, itemsPerPage * pageNumber);

	var n = 0;
	for(var i = 0; i < mainCtl.options.length; i++) // through the whole list
	{
		if(ContainsWildcardString(mainCtl.options[i].text, ajaxSelectionGridGetSearchText(ctlID)))
		{
			if(n >= firstItemInd && n < itemsPerPage * pageNumber)
			{
				addCheckbox(ctlID, i, mainCtl.options[i].text, mainCtl.options[i].value);
			}
			n++;
		}
	}
		
	var totalPages = Math.ceil(n / itemsPerPage);
	ajaxSelectionGridSetTotalPages(ctlID, totalPages);
	manageLinkBar(ctlID, pageNumber);	
}

function TrimString(string, trimChar)
{
	while (string[0] == trimChar)
	{
		string = string.substring(1);
	}
	while (string[string.length] == trimChar)
	{
		string = string.substring(0, string.length - 2);
	}
	return string;
}

function ContainsWildcardString(superString, subString)
{
	subString = subString.replace("*", "%");
	var subStringTemp = TrimString(subString, '%');

	if (subStringTemp != "")
	{
		subStringTemp = subStringTemp.replace("%", ""); //ignore wildcards in the middle of the substring
	} else
		return true;

	subStringTemp = subStringTemp.toLowerCase();
	superString = superString.toLowerCase();

	if (subString.indexOf("%") > -1)
	{
		if (subString[0] != '%')
		{
			return (superString.indexOf(subStringTemp) == 0);
		}
		if (subString[subString.length - 1] != '%')
		{
			return superString.substring(superString.length - subStringTemp.length) == subStringTemp;
		}
	}
			
	return superString.indexOf(subStringTemp) > -1; //at this point, the substring either has wildcards at both ends, or no wildcards.
}

function ajaxSelectionGridGoToPage(ctlID, pageNumber)
{
	if (document.getElementById(ctlID + "_PageMode") == null) //not a searchlist
	{
		return false;
	}
	if (!ajaxSelectionGridPageModeIsSelectedOnly(ctlID))
	{
		manageLinkBar(ctlID, pageNumber);
		return false;
	}
	ajaxSelectionGridGoToSelectedPage(ctlID, pageNumber);
	return true;
}

function ajaxSelectionGridGoToNextPage(ctlID)
{
	if (!ajaxSelectionGridPageModeIsSelectedOnly(ctlID))
	{
		manageLinkBar(ctlID, ajaxSelectionGridGetCurrentPage(ctlID) + 1);
		return false;
	}
	ajaxSelectionGridGoToSelectedPage(ctlID, ajaxSelectionGridGetCurrentPage(ctlID) + 1);
	return true;
}

function ajaxSelectionGridGoToPrevPage(ctlID)
{
	if (!ajaxSelectionGridPageModeIsSelectedOnly(ctlID))
	{
		manageLinkBar(ctlID, ajaxSelectionGridGetCurrentPage(ctlID) - 1);
		return false;
	}
	ajaxSelectionGridGoToSelectedPage(ctlID, ajaxSelectionGridGetCurrentPage(ctlID) - 1);
	return true;
}

function ajaxSelectionGridGoToFirstPage(ctlID)
{
	if (!ajaxSelectionGridPageModeIsSelectedOnly(ctlID))
	{
		manageLinkBar(ctlID, 1);
		return false;
	}
	ajaxSelectionGridGoToSelectedPage(ctlID, 1);
	return true;
}

function ajaxSelectionGridGoToLastPage(ctlID)
{
	if (!ajaxSelectionGridPageModeIsSelectedOnly(ctlID))
	{
		manageLinkBar(ctlID, ajaxSelectionGridGetTotalPages(ctlID));
		return false;
	}
	ajaxSelectionGridGoToSelectedPage(ctlID, ajaxSelectionGridGetTotalPages(ctlID));
	return true;
}

function ajaxSelectionGridGetCurrentPage(ctlID)
{
	var currPage = document.getElementById(ctlID + "_CurrentPage");
	return parseInt(currPage.value, 10);
}

function ajaxSelectionGridGetTotalPages(ctlID)
{
	var totalPages = document.getElementById(ctlID + "_TotalPages");
	return parseInt(totalPages.value, 10);
}

function ajaxSelectionGridSetCurrentPage(ctlID, page)
{
	var currPage = document.getElementById(ctlID + "_CurrentPage");
	currPage.value = page.toString();
}

function ajaxSelectionGridSetTotalPages(ctlID, pages)
{
	var totalPages = document.getElementById(ctlID + "_TotalPages");
	totalPages.value = pages.toString();
}

function ajaxSelectionGridSetItemsPerPage(ctlID, items)
{
	var itemsPerPage = document.getElementById(ctlID + "_ItemsPerPage");
	itemsPerPage.value = items.toString();
}

function ajaxSelectionGridGetItemsPerPage(ctlID)
{
	var itemsPerPage = document.getElementById(ctlID + "_ItemsPerPage");
	return parseInt(itemsPerPage.value, 10);;
}

function removeCheckbox(ctlID, values)
{
	var reflectedCtl = document.getElementById(ctlID + "_ReflectedListBox");
	if (reflectedCtl == null)
	{
		return false;
	}
	
	var removeIndices = new Array();
	
	for (var i = 0; i < reflectedCtl.options.length; i++)
	{
		if (values.indexOf(reflectedCtl.options[i].value) > -1)
		{
			removeIndices[removeIndices.length] = i;
		}
	}
	
	if (removeIndices.length < 1)
	{
		return;
	}
	
	var cbTable = document.getElementById(ctlID + "_FrontEndCBList");
	for (var i = removeIndices.length - 1; i >= 0; i--)
	{
		reflectedCtl[removeIndices[i]] = null;
		cbTable.deleteRow(removeIndices[i] + 1);
	}
	reIndexCheckboxes(ctlID, removeIndices[0], removeIndices.length);
	
	return true;
}

function reIndexCheckboxes(ctlID, firstDeletedIndex, deltaIndex)
{
	var morphInd = firstDeletedIndex + deltaIndex;
	var checkBox = document.getElementById(ctlID + "_FrontEndCBList_" + morphInd);
	while (checkBox != null)
	{
		checkBox.id = ctlID + "_FrontEndCBList_" + (morphInd - deltaIndex).toString();
		morphInd = morphInd + 1;
		checkBox = document.getElementById(ctlID + "_FrontEndCBList_" + morphInd);
	}
}

function addCheckbox(ctlID, index, label, value) //I wish I could prototype appendChild on the Select element -- that way any client append call to the list control would make it happen -- but no dice.
{
	var cbList = document.getElementById(ctlID + "_FrontEndCBList");
	var reflectedCtl = document.getElementById(ctlID + "_ReflectedListBox");
	
	if (cbList != null && reflectedCtl != null)
	{
		if(cbList.rows.length < 1)
		{
			alert("addCheckbox error - no header row was found");
			return;
		}
		
		index = reflectedCtl.options.length;
		var indexStr = index.toString();
		var cbId = ctlID + "_FrontEndCBList_" + indexStr;	
		
		var strChecked = "";
		var listCtl = document.getElementById(ctlID);
		for (var i = 0; i < listCtl.options.length; i++)
		{
			if (listCtl.options[i].value == value)
			{
				strChecked = " checked ";
			}
		}

		var strDisabled = "";
		if(ajaxSelectionGridPageModeIsSelectedOnly(ctlID))
		{	
			strDisabled = " disabled='disabled' ";
		}
		
		var row = cbList.insertRow(cbList.rows.length);
		row.id = cbId + "_TR";
		row.bgColor = index % 2 == 0 ? oddRowColor : evenRowColor; //0-based indices

		var cell = row.insertCell(0);
		cell.style.borderWidth = "0px";
		cell.style.borderCollapse = "collapse";
		cell.innerHTML = "<input "
			+ " id=\"" + cbId + "\" type=\"checkbox\" "
			+ " onclick=\"selectListBoxItem('" + ctlID + "', this.id, this.checked, event); "
			+    "if (" + ajaxSelectionGridClickHandlerName + " != null) " 
			+    ajaxSelectionGridClickHandlerName + "('" + ctlID + "', " + index.toString() + ", this.checked);\"" 
			+ " name='" + ctlID + "_FrontEndCBList:" + indexStr + "'" 
			+ strChecked 
			+ strDisabled 
			+ "/>";

		var columns = cbList.rows[0].cells.length - 1;
		var values = label.split(" | ");
		
		try
		{
			for(var i = 0; i < columns; i++)
			{
				cell = row.insertCell(i + 1);
				cell.style.borderWidth = "0px";
				cell.style.borderCollapse = "collapse";
				cell.innerHTML = values[i];
			}
		}
		catch(Ex){}

		appendToListbox(reflectedCtl, value, label);
		
		return true;
		
	}
	else
	{
		return false;
	}
}

function ajaxSelectionGridCollapseCell(cell)
{
	cell.style.borderWidth = "0px";
	cell.style.borderCollapse = "collapse";
}

function ajaxSelectionGridForgetSelections(ctlID)
{
	var ctl = document.getElementById(ctlID);
	ctl.options.length = 0;
}

function ajaxSelectionGridPageModeIsSelectedOnly(ctlID) //returns a bool
{
	var pageMode = document.getElementById(ctlID + "_PageMode");

	if(pageMode && pageMode.value == "Selected")
	{
		return true;
	}
	return false;

}

function ajaxSelectionGridPageModeIsFiltered(ctlID) //returns a bool
{
	var img = document.getElementById(ctlID + "_SearchBtn");

	if (img && img.src.indexOf("magglass.gif") > 0)
	{
		return true;
	}
	return false;
}

function ajaxSelectionGridStoreInBuffer(ctlID, value)
{
	var buffer = document.getElementById(ctlID + "_MiscBuffer");
	buffer.value = value;
}

function ajaxSelectionGridGetBufferValue(ctlID)
{
	var buffer = document.getElementById(ctlID + "_MiscBuffer");
	return buffer.value;
}

function ajaxSelectionGridSetPageMode(ctlID, selectedOnly) //pass a bool in the second argument.
{
	var pageMode = document.getElementById(ctlID + "_PageMode");
	if (pageMode == null)
	{
		return;
	}
	var selOnlyImg = document.getElementById(ctlID + "_SelImg").value;
	var allImg = document.getElementById(ctlID + "_AllImg").value;
	var img = document.getElementById(ctlID + "_PageModeBtn");

	var selAll = document.getElementById(ctlID + "_SelectAll");
	
	if(selectedOnly)
	{
		img.src = allImg;

		pageMode.value = "Selected";
		if(selAll != null){
			selAll.disabled = true;
			selAll.title = document.SelectAllStr;
		}
		ajaxSelectionGridGoToSelectedPage(ctlID, 1);
	} 
	else
	{
		img.src = selOnlyImg;
		pageMode.value = "All";
		if(selAll != null){
			selAll.disabled = false;
			selAll.title = document.SelectAllStr;
		}
	}
}

function SearchButtonToggle(ctlID, searchImg, clearImg)
{
	var img = document.getElementById(ctlID + "_SearchBtn");
	var textBox = document.getElementById(ctlID + "_SearchTxt");
	var selOnly = ajaxSelectionGridPageModeIsSelectedOnly(ctlID);
	var filtered = ajaxSelectionGridPageModeIsFiltered(ctlID);
	var mainCtl = document.getElementById(ctlID);
	
	if(filtered)
	{
		textBox.disabled = 'disabled';
		img.src = clearImg;

		if ( ! selOnly)
		{
			return true;
		}

		ajaxSelectionGridGoToSelectedPage(ctlID, 1); // it will set TotalPages and get filtered elements only

		return false;
		
	}
	else
	{
		textBox.disabled = '';
		textBox.value = '';
		img.src = searchImg;
		img.disabled = true;

		if( ! selOnly)
		{
			return true;
		}

		ajaxSelectionGridSetTotalPages(ctlID, Math.ceil(mainCtl.options.length/ajaxSelectionGridGetItemsPerPage(ctlID)));
		ajaxSelectionGridGoToPage(ctlID, 1);
//		ajaxSelectionGridSetPageMode(ctlID, true);

		return false;
	}
}

function clearCheckboxes(ctlID)
{
	var cbList = document.getElementById(ctlID + "_FrontEndCBList");
	var reflectedCtl = document.getElementById(ctlID + "_ReflectedListBox");
	if (cbList != null && reflectedCtl != null)
	{
		for (var i = cbList.rows.length - 1; i > 0; i--) // first row should stay
		{
			cbList.deleteRow(i);
		}

		var ctl = document.getElementById(ctlID);
		reflectedCtl.options.length = 0;
		return true;
	}
	else
	{
		return false;
	}
}

function ajaxSelectionGridClearSearch(ctlID)
{
	var textBox = document.getElementById(ctlID + "_SearchTxt");
	var searchBtn = document.getElementById(ctlID + "_SearchBtn");
	textBox.disabled = false;
	textBox.value = "";
	searchBtn.src = document.getElementById(ctlID + "_SearchImg").value;
	searchBtn.disabled = true;
}

function pageModeButtonToggle(ctlID)
{
	var img = document.getElementById(ctlID + "_PageModeBtn");
	var searchBtnImg = document.getElementById(ctlID + "_SearchImg").value;
	var selOnlyImg = document.getElementById(ctlID + "_SelImg").value;
	var allImg = document.getElementById(ctlID + "_AllImg").value;
	ajaxSelectionGridClearSearch(ctlID);
	
	if (img.src.indexOf("i_pen.gif") > -1)
	{
		img.src = allImg;
		ajaxSelectionGridStoreInBuffer(ctlID, ajaxSelectionGridGetCurrentPage(ctlID).toString());
		ajaxSelectionGridSetPageMode(ctlID, true);
		return false;
	} else
	{
		img.src = selOnlyImg;
		ajaxSelectionGridSetPageMode(ctlID, false);
		ajaxSelectionGridSetCurrentPage(ctlID, parseInt(ajaxSelectionGridGetBufferValue(ctlID), 10));
		return true;
	}
}

function selectCheckbox(ctlID, cbId, checked)
{

	var startPos = cbId.indexOf("_FrontEndCBList_") + 16;
	var index = cbId.substr(startPos, cbId.length - startPos);
	var cb = document.getElementById(ctlID + "_FrontEndCBList_" + index);
	if (cb.checked == checked)
	{
		return false;
	}
	if (cb != null)
	{
		var tablerow = document.getElementById(cb.id + "_TR");
		if (tablerow.style.visibility != "collapse")
		{
			cb.checked = checked;
			return true;
		}
		else
		{
			return false;
		}
	}
}

function ajaxSelectionGridIsHidden(ctlID)
{
	var div = document.getElementById(ctlID + "_div");
	if (div == null || div.style.display == 'none')
	{
		return true;
	}
	return false;
}

function ajaxSelectionGridEnable(ctlID, enable)
{
	var img = document.getElementById(ctlID + "_ShowHideBtn");
	if (img == null) //not a AjaxSelectionGrid
	{
		return false;
	}
	
	if (enable)
	{
		img.disabled = false;
	}
	else
	{
		img.src = document.getElementById(ctlID + "_ShowImg").value;;
		img.disabled = true;
		var div = document.getElementById(ctlID + "_div");
		div.style.display = 'none';
		ajaxSelectionGridSetDataValid(ctlID, false, true);
	}
	return true;
}

function selectListBoxItem(listID, cbId, sel, evt)
{
//alert(listID + ":" + cbId + ":" + sel);
	var startPos = cbId.indexOf("_FrontEndCBList_") + 16;
	var index = parseInt(cbId.substr(startPos, cbId.length - startPos), 10);

	var reflectedCtl = document.getElementById(listID + "_ReflectedListBox");
	var listCtl = document.getElementById(listID);
	
	if(sel)
	{
		var singleSelectionCtl = document.getElementById(listID + "_SingleSelection");
		
		if(singleSelectionCtl != null && singleSelectionCtl.value == "1")
		{
			listCtl.options.length = 0; // clear the list
			
			// clear other checkboxes
			var itemsPerPage = ajaxSelectionGridGetItemsPerPage(listID);

			for(var i = 0; i < itemsPerPage; i++)
			{
				if(i != index)
				{
					var cb = document.getElementById(listID + "_FrontEndCBList_" + i);

					if(cb != null){
						cb.checked = false;
					}					
				}
			}
		}

		appendToListbox(listCtl, reflectedCtl.options[index].value, reflectedCtl.options[index].text);
		listCtl.options[listCtl.options.length - 1].selected = true;
	}
	else
	{
		var selAll = document.getElementById(listID + "_SelectAll");
		if(selAll != null){
			selAll.checked = false;
			selAll.title = document.SelectAllStr;
		}
		
		for (var i = listCtl.options.length - 1; i >= 0; i--)
		{	
			if (listCtl.options[i].value == reflectedCtl.options[index].value)
			{
				listCtl.remove(i);
			}
		}
	}
	
	ajaxSelectionGridShowSelectedName(listID);
	
	try{
		if(evt.ctrlKey){
			ajaxSelectionGridDoHiding(listID);
		}
	} catch(E){}
}

function ajaxSelectionGridShowSelectedName(ctlID)
{
	var isShowSelectedNameMode = (document.getElementById(ctlID + "_Filtered") != null);
	
	if(isShowSelectedNameMode)
	{		
		var listCtl = document.getElementById(ctlID);
		var lbl = document.getElementById(ctlID + "_Label");

		if(lbl != null)
		{
			if(listCtl.options.length == 0)
			{
				lbl.innerHTML = "";
			}
			else if(listCtl.options.length == 1)
			{
				lbl.innerHTML = listCtl.options[listCtl.options.length - 1].text;
			}
			else //if(listCtl.options.length > 1)
			{
				var filteredWord = document.getElementById(ctlID + "_Filtered").value;
				lbl.innerHTML = filteredWord + " (" + listCtl.options.length + ")";
			}
		}
	}
}

function ajaxSelectionGridShowHideWorkingSign(ctlID, showHide)
{
	var divWait = document.getElementById(ctlID + "_Working1");
	var divLabel = document.getElementById(ctlID + "_LabelDiv");
	
	if(divWait && divLabel)
	{
		divWait.style.display = (showHide ? 'block' : 'none');
		divLabel.style.display = (showHide ? 'none' : 'block');
	}
}

function ajaxSelectionGridShowHideWorkingSign2(ctlID, showHide)
{
	var divWait = document.getElementById(ctlID + "_Working2");
	var divNavTable = document.getElementById(ctlID + "_NavTable");
	
	if(divWait && divNavTable)
	{
		divWait.style.display = (showHide ? 'block' : 'none');
		divNavTable.style.display = (showHide ? 'none' : 'block');
	}
}

function ajaxSelectionGridSearchBoxOnKeypress(evt, func, ctlID, searchImg, clearImg)
{
	var key;

	try //IE (has to be first!)
	{
        key = event.keyCode;
		if (key == 13)
		{
			event.returnValue = false;
		}
	}
	catch (e) // not IE
	{
        key = evt.keyCode;
	}

	if (key == 13)
	{
		if(typeof(eval(func)) == 'function')
		{
			SearchButtonToggle(ctlID, searchImg, clearImg);
			//alert(func + "('"+ ctlID +"')" + ", " + searchImg + ", " + clearImg);
			eval(func + "('"+ ctlID +"')");
		}
		
		return false;
	}

	return true;
}

