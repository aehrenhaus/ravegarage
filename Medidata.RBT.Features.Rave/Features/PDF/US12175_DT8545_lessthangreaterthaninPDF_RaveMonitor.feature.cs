// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Medidata.RBT.Features.Rave.Features.PDF
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RaveMonitor_WhenAnEDCFormContainsSpecialCharactersSuchAsThePDFFileShouldDisplayTheSpecialCharactersAppropriately_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "US12175_DT8545_lessthangreaterthaninPDF_RaveMonitor.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Rave Monitor. When an EDC form contains special characters such as \"<\" \">\" \"<=\" \"" +
                    ">=\" the PDF file should display the special characters appropriately.", @"Rave architect allows for characters that the PDF generator does support. The PDF generator should convert the special characters so that they are displayed appropriately as follows:
|Rave Architect	 		|PDF Interpretation |Symbol in PDF                 |
|&lt 					|&lt;               |<                             |
|&gt					|&gt;               |>                             |
|&ge					|<u>&gt;</u>        |>(underlined)                 |
|&ge;					|<u>&gt;</u>        |>(underlined)                 |
|&le					|<u>&lt;</u>        |<(underlined)                 |
|&le;					|<u>&lt;</u>        |<(underlined)                 |
|bullet points <li>		|<br/> •            |(Line Break/carriage return) •|
|(user hitting ""enter"")	|<br/>              |(Line Break/carriage return)  |

NOTE: An underlined "">"" will display instead of "">="" which is represented by "">(underlined)"" in this feature file as text editors do not allow underlines.
     An underlined ""<"" will display instead of ""<="" which is represented by ""<(underlined)"" in this feature file as text editors do not allow underlines.
NOTE: user hitting ""enter"" was previously interpreted as "" "" but should be interpreted as a new line. In certain Japanese fonts it had been
interpreted as ""=""

  This rendering should be implemented for blank PDFs, annotated PDFs, data populated PDFs, Rave Monitor Trip Report PDFs. 
This rendering should be implemented for all parts of the PDFs.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Rave Monitor. When an EDC form contains special characters such as \"<\" \">\" \"<=\" \"" +
                            ">=\" the PDF file should display the special characters appropriately.")))
            {
                Medidata.RBT.Features.Rave.Features.PDF.RaveMonitor_WhenAnEDCFormContainsSpecialCharactersSuchAsThePDFFileShouldDisplayTheSpecialCharactersAppropriately_Feature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 23
#line 24
    testRunner.Given("I am logged in to Rave with username \"defuser\" and password \"password\"");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043K A blank-populated PDF that is generated should properly display special" +
            " characters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Rave Monitor. When an EDC form contains special characters such as \"<\" \">\" \"<=\" \"" +
            ">=\" the PDF file should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043K")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043KABlank_PopulatedPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043K A blank-populated PDF that is generated should properly display special" +
                    " characters", new string[] {
                        "release_2012.1.0",
                        "US11043K",
                        "Draft"});
#line 72
this.ScenarioSetup(scenarioInfo);
#line 23
this.FeatureBackground();
#line 75
 testRunner.When("I select Study \"test15\" in \"EDC\"");
#line 76
 testRunner.And("I select link \"Monitor Visits\" located in \"Left Nav\"");
#line 77
 testRunner.When("I generate PDF for all visits");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table1.AddRow(new string[] {
                        "&gt"});
            table1.AddRow(new string[] {
                        "&ge"});
            table1.AddRow(new string[] {
                        "&ge;"});
            table1.AddRow(new string[] {
                        "&lt"});
            table1.AddRow(new string[] {
                        "&le"});
            table1.AddRow(new string[] {
                        "&le;"});
            table1.AddRow(new string[] {
                        "&lt;li&gt;"});
            table1.AddRow(new string[] {
                        "&lt;br/&gt;"});
            table1.AddRow(new string[] {
                        "<li>"});
            table1.AddRow(new string[] {
                        "<br/>"});
#line 78
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table1);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043L A data-populated PDF that is generated should properly display special " +
            "characters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Rave Monitor. When an EDC form contains special characters such as \"<\" \">\" \"<=\" \"" +
            ">=\" the PDF file should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043L")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043LAData_PopulatedPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043L A data-populated PDF that is generated should properly display special " +
                    "characters", new string[] {
                        "release_2012.1.0",
                        "US11043L",
                        "Draft"});
#line 94
this.ScenarioSetup(scenarioInfo);
#line 23
this.FeatureBackground();
#line 97
 testRunner.When("I select Study \"test14\" in \"EDC\"");
#line 98
 testRunner.And("I select link \"Monitor Visits\" located in \"Left Nav\"");
#line 126
 testRunner.When("I generate PDF for all visits");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table2.AddRow(new string[] {
                        "&gt"});
            table2.AddRow(new string[] {
                        "&ge"});
            table2.AddRow(new string[] {
                        "&ge;"});
            table2.AddRow(new string[] {
                        "&lt"});
            table2.AddRow(new string[] {
                        "&le"});
            table2.AddRow(new string[] {
                        "&le;"});
            table2.AddRow(new string[] {
                        "&lt;li&gt;"});
            table2.AddRow(new string[] {
                        "&lt;br/&gt;"});
            table2.AddRow(new string[] {
                        "<li>"});
            table2.AddRow(new string[] {
                        "<br/>"});
#line 127
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table2);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
