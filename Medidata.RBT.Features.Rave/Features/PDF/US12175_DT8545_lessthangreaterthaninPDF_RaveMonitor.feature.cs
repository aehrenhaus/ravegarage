// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Medidata.RBT.Features.Rave.Features.PDF
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RaveMonitor_WhenAnEDCFormContainsSpecialCharactersSuchAsThePDFFileShouldDisplayTheSpecialCharactersAppropriately_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "US12175_DT8545_lessthangreaterthaninPDF_RaveMonitor.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Rave Monitor. When an EDC form contains special characters such as \"<\" \">\" \"<=\" \"" +
                    ">=\" the PDF file should display the special characters appropriately.", "Rave architect allows for characters that the PDF generator does support. The PDF" +
                    " generator should convert the special characters so that they are displayed appr" +
                    "opriately as follows:\r\n|Rave Architect\t \t\t|PDF Interpretation |Symbol in PDF    " +
                    "             |\r\n|&lt \t\t\t\t\t|&lt;               |<                             |\r\n" +
                    "|&gt\t\t\t\t\t|&gt;               |>                             |\r\n|&ge\t\t\t\t\t|<u>&gt;" +
                    "</u>        |>(underlined)                 |\r\n|&ge;\t\t\t\t\t|<u>&gt;</u>        |>(u" +
                    "nderlined)                 |\r\n|&le\t\t\t\t\t|<u>&lt;</u>        |<(underlined)       " +
                    "          |\r\n|&le;\t\t\t\t\t|<u>&lt;</u>        |<(underlined)                 |\r\n|bu" +
                    "llet points <li>\t\t|<br/> •            |(Line Break/carriage return) •|\r\n|(user h" +
                    "itting \"enter\")\t|<br/>              |(Line Break/carriage return)  |\r\n\r\nNOTE: An" +
                    " underlined \">\" will display instead of \">=\" which is represented by \">(underlin" +
                    "ed)\" in this feature file as text editors do not allow underlines.\r\n     An unde" +
                    "rlined \"<\" will display instead of \"<=\" which is represented by \"<(underlined)\" " +
                    "in this feature file as text editors do not allow underlines.\r\nNOTE: user hittin" +
                    "g \"enter\" was previously interpreted as \" \" but should be interpreted as a new l" +
                    "ine. In certain Japanese fonts it had been\r\ninterpreted as \"=\"\r\n\r\n  This renderi" +
                    "ng should be implemented for blank PDFs, annotated PDFs, data populated PDFs, Ra" +
                    "ve Monitor Trip Report PDFs. \r\nThis rendering should be implemented for:\r\ntransl" +
                    "ations\r\nfield pretext\r\ndata dictionaries on the CRF but NOT in the audit trail\r\n" +
                    "unit dictionaries on the CRF but NOT in the audit trail\r\ncoding dictionaries on " +
                    "the CRF but NOT in the audit trail\r\nlab units on the CRF but NOT in the audit tr" +
                    "ail (does not apply to Rave Monitor Trip Report PDFs)\r\nlab ranges on the CRF but" +
                    " NOT in the audit trail (does not apply to Rave Monitor Trip Report PDFs)\r\nThis " +
                    "rendering will NOT be implented for:\r\nbookmarks\r\nlab names\r\nForm names", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Rave Monitor. When an EDC form contains special characters such as \"<\" \">\" \"<=\" \"" +
                            ">=\" the PDF file should display the special characters appropriately.")))
            {
                Medidata.RBT.Features.Rave.Features.PDF.RaveMonitor_WhenAnEDCFormContainsSpecialCharactersSuchAsThePDFFileShouldDisplayTheSpecialCharactersAppropriately_Feature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 34
#line 35
    testRunner.Given("I am logged in to Rave with username \"defuser\" and password \"password\"");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043K A blank-populated PDF that is generated should properly display special" +
            " characters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Rave Monitor. When an EDC form contains special characters such as \"<\" \">\" \"<=\" \"" +
            ">=\" the PDF file should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043K")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043KABlank_PopulatedPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043K A blank-populated PDF that is generated should properly display special" +
                    " characters", new string[] {
                        "release_2012.1.0",
                        "US11043K",
                        "Draft"});
#line 83
this.ScenarioSetup(scenarioInfo);
#line 34
this.FeatureBackground();
#line 86
 testRunner.When("I select Study \"test15\" in \"EDC\"");
#line 87
 testRunner.And("I select link \"Monitor Visits\" located in \"Left Nav\"");
#line 88
 testRunner.When("I generate PDF for all visits");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table1.AddRow(new string[] {
                        "&gt"});
            table1.AddRow(new string[] {
                        "&ge"});
            table1.AddRow(new string[] {
                        "&ge;"});
            table1.AddRow(new string[] {
                        "&lt"});
            table1.AddRow(new string[] {
                        "&le"});
            table1.AddRow(new string[] {
                        "&le;"});
            table1.AddRow(new string[] {
                        "&lt;li&gt;"});
            table1.AddRow(new string[] {
                        "&lt;br/&gt;"});
            table1.AddRow(new string[] {
                        "<li>"});
            table1.AddRow(new string[] {
                        "<br/>"});
#line 89
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table1);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043L A data-populated PDF that is generated should properly display special " +
            "characters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Rave Monitor. When an EDC form contains special characters such as \"<\" \">\" \"<=\" \"" +
            ">=\" the PDF file should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043L")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043LAData_PopulatedPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043L A data-populated PDF that is generated should properly display special " +
                    "characters", new string[] {
                        "release_2012.1.0",
                        "US11043L",
                        "Draft"});
#line 105
this.ScenarioSetup(scenarioInfo);
#line 34
this.FeatureBackground();
#line 108
 testRunner.When("I select Study \"test14\" in \"EDC\"");
#line 109
 testRunner.And("I select link \"Monitor Visits\" located in \"Left Nav\"");
#line 137
 testRunner.When("I generate PDF for all visits");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table2.AddRow(new string[] {
                        "&gt"});
            table2.AddRow(new string[] {
                        "&ge"});
            table2.AddRow(new string[] {
                        "&ge;"});
            table2.AddRow(new string[] {
                        "&lt"});
            table2.AddRow(new string[] {
                        "&le"});
            table2.AddRow(new string[] {
                        "&le;"});
            table2.AddRow(new string[] {
                        "&lt;li&gt;"});
            table2.AddRow(new string[] {
                        "&lt;br/&gt;"});
            table2.AddRow(new string[] {
                        "<li>"});
            table2.AddRow(new string[] {
                        "<br/>"});
#line 138
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table2);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
