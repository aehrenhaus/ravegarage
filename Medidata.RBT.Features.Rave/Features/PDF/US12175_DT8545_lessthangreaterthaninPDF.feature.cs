// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Medidata.RBT.Features.Rave.Features.PDF
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WhenAnEDCFormContainsSpecialCharactersSuchAsThePDFFileShouldDisplayTheSpecialCharactersAppropriately_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "US12175_DT8545_lessthangreaterthaninPDF.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "When an EDC form contains special characters such as \"<\" \">\" \"<=\" \">=\" the PDF fi" +
                    "le should display the special characters appropriately.", "Rave architect allows for characters that the PDF generator does support. The PDF" +
                    " generator should convert the special characters so that they are displayed appr" +
                    "opriately as follows:\r\n|Rave Architect\t \t\t|PDF Interpretation |Symbol in PDF    " +
                    "             |\r\n|&lt \t\t\t\t\t|&lt;               |<                             |\r\n" +
                    "|&gt\t\t\t\t\t|&gt;               |>                             |\r\n|&ge\t\t\t\t\t|<u>&gt;" +
                    "</u>        |>(underlined)                 |\r\n|&ge;\t\t\t\t\t|<u>&gt;</u>        |>(u" +
                    "nderlined)                 |\r\n|&le\t\t\t\t\t|<u>&lt;</u>        |<(underlined)       " +
                    "          |\r\n|&le;\t\t\t\t\t|<u>&lt;</u>        |<(underlined)                 |\r\n|bu" +
                    "llet points <li>\t\t|<br/> •            |(Line Break/carriage return) •|\r\n|(user h" +
                    "itting \"enter\")\t|<br/>              |(Line Break/carriage return)  |\r\n\r\nNOTE: An" +
                    " underlined \">\" will display instead of \">=\" which is represented by \">(underlin" +
                    "ed)\" in this feature file as text editors do not allow underlines.\r\n     An unde" +
                    "rlined \"<\" will display instead of \"<=\" which is represented by \"<(underlined)\" " +
                    "in this feature file as text editors do not allow underlines.\r\nNOTE: user hittin" +
                    "g \"enter\" was previously interpreted as \" \" but should be interpreted as a new l" +
                    "ine. In certain Japanese fonts it had been\r\ninterpreted as \"=\"\r\nThis rendering s" +
                    "hould be implemented for fonts \r\n|Font                       |\r\n|Helvetica      " +
                    "            |\r\n|Times Roman                |\r\n|Times New Roman Embedded   |\r\n\r\n|" +
                    "Asian Font               |\r\n|Heisei Kaku Gothic W5    |\r\n|Meiryo                " +
                    "   |\r\n\r\nThis rendering should be implemented for blank PDFs, annotated PDFs, dat" +
                    "a populated PDFs, Rave Monitor Trip Report PDFs. \r\nThis rendering should be impl" +
                    "emented for:\r\ntranslations\r\nfield pretext\r\ndata dictionaries on the CRF but NOT " +
                    "in the audit trail\r\nunit dictionaries on the CRF but NOT in the audit trail\r\ncod" +
                    "ing dictionaries on the CRF but NOT in the audit trail\r\nlab units on the CRF but" +
                    " NOT in the audit trail (does not apply to Rave Monitor Trip Report PDFs)\r\nlab r" +
                    "anges on the CRF but NOT in the audit trail (does not apply to Rave Monitor Trip" +
                    " Report PDFs)\r\nThis rendering will NOT be implented for:\r\nbookmarks\r\nlab names\r\n" +
                    "Form names", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "When an EDC form contains special characters such as \"<\" \">\" \"<=\" \">=\" the PDF fi" +
                            "le should display the special characters appropriately.")))
            {
                Medidata.RBT.Features.Rave.Features.PDF.WhenAnEDCFormContainsSpecialCharactersSuchAsThePDFFileShouldDisplayTheSpecialCharactersAppropriately_Feature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 45
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "VarOID",
                        "Format",
                        "Field Name",
                        "Field OID",
                        "Active",
                        "Is Visible Field",
                        "Field Label",
                        "Control Type",
                        "Lab Analyte",
                        "Prompt for Clinical Significance"});
            table1.AddRow(new string[] {
                        "WBC",
                        "4.2",
                        "WBC",
                        "WBC",
                        "true",
                        "true",
                        "WBC&lt&gt&ge&ge;&le&le;bullet points&lt;li&gt;&lt;br/&gt;break",
                        "Text",
                        "WBC",
                        "true"});
            table1.AddRow(new string[] {
                        "NEUTROPHILS",
                        "4.2",
                        "NEUTROPHILS",
                        "NEUTROPHILS",
                        "true",
                        "true",
                        "&lt&gt&ge&ge;&le&le;bullet points&lt;li&gt;&lt;br/&gt;breakNEUTROPHILS",
                        "Text",
                        "NEUTROPHILS",
                        "false"});
#line 140
testRunner.And(@"form ""PDF Lab Form"" has varOID ""<VarOID>"" has format ""<Format>"" has field name ""<Field Name>"" has field OID ""<Field OID>"" has status ""<Active>"" has visible status ""<Is Visible Field>"" has field label ""<Field Label>"" has control type ""<Control Type>"" has lab analyte ""<Lab Analyte>"" has prompt for clinical significance ""<Prompt for Clinical Significance>""", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Lab Unit"});
            table2.AddRow(new string[] {
                        "%"});
#line 145
   testRunner.And("the following Lab Units exists", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Units"});
            table3.AddRow(new string[] {
                        "WBC",
                        "%"});
            table3.AddRow(new string[] {
                        "Neutrophils",
                        "%"});
#line 149
   testRunner.And("the following Lab Unit Dictionary exists", ((string)(null)), table3);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Analytes",
                        "Lab Unit Dictionary"});
            table4.AddRow(new string[] {
                        "WBC",
                        "WBC"});
            table4.AddRow(new string[] {
                        "NEUTROPHILS",
                        "NEUTROPHILS"});
#line 154
 testRunner.And("the following Analytes exists", ((string)(null)), table4);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Range Type"});
            table5.AddRow(new string[] {
                        "US12175 Range"});
#line 159
 testRunner.And("the following Range Types exists", ((string)(null)), table5);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Analyte",
                        "From Date",
                        "To Date",
                        "Low Value",
                        "High Value",
                        "Units"});
            table6.AddRow(new string[] {
                        "WBC",
                        "01 Jan 2005",
                        "01 Jan 2015",
                        "15",
                        "25",
                        "%"});
            table6.AddRow(new string[] {
                        "NEUTROPHILS",
                        "01 Jan 2005",
                        "01 Jan 2015",
                        "40",
                        "50",
                        "%"});
#line 163
 testRunner.And("lab \"US12175 Lab\" with Range Type \"US12175 Range\" has analyte \"Analyte\" has from " +
                    "date \"From Date\" has to date \"To Date\" has low value \"Low Value\" has high value " +
                    "\"High Value\" has units \"Units\"", ((string)(null)), table6);
#line 244
 testRunner.Given("I am logged in to Rave with username \"defuser\" and password \"password\"");
#line 348
 testRunner.When("I navigate to \"PDF Generator\" module");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043A A blank PDF that is generated should properly display special character" +
            "s.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "When an EDC form contains special characters such as \"<\" \">\" \"<=\" \">=\" the PDF fi" +
            "le should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043A")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043AABlankPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043A A blank PDF that is generated should properly display special character" +
                    "s.", new string[] {
                        "release_2012.1.0",
                        "US11043A",
                        "Draft"});
#line 353
this.ScenarioSetup(scenarioInfo);
#line 45
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Profile",
                        "Study",
                        "Role",
                        "Locale",
                        "CRFVersion"});
            table7.AddRow(new string[] {
                        "Blank PDF A{RndNum<num>(3)}",
                        "PDF 1",
                        "PDF Font Study (Prod)",
                        "CDM1B144V1",
                        "English",
                        "6 (284)"});
#line 358
 testRunner.When("I create Blank PDF", ((string)(null)), table7);
#line 361
 testRunner.And("I generate Blank PDF \"Blank PDF A{Var(num)}\"");
#line 362
 testRunner.And("I wait for PDF \"Blank PDF A{Var(num)}\" to complete");
#line 363
 testRunner.When("I View Blank PDF \"Blank PDF A{Var(num)}\"");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table8.AddRow(new string[] {
                        "&gt"});
            table8.AddRow(new string[] {
                        "&ge"});
            table8.AddRow(new string[] {
                        "&ge;"});
            table8.AddRow(new string[] {
                        "&lt"});
            table8.AddRow(new string[] {
                        "&le"});
            table8.AddRow(new string[] {
                        "&le;"});
            table8.AddRow(new string[] {
                        "&lt;li&gt;"});
            table8.AddRow(new string[] {
                        "&lt;br&gt;"});
#line 364
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table8);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043B A blank PDF that is generated should properly display special character" +
            "s.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "When an EDC form contains special characters such as \"<\" \">\" \"<=\" \">=\" the PDF fi" +
            "le should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043B")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043BABlankPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043B A blank PDF that is generated should properly display special character" +
                    "s.", new string[] {
                        "release_2012.1.0",
                        "US11043B",
                        "Draft"});
#line 378
this.ScenarioSetup(scenarioInfo);
#line 45
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Profile",
                        "Study",
                        "Role",
                        "Locale",
                        "CRFVersion"});
            table9.AddRow(new string[] {
                        "Blank PDF B{RndNum<num>(3)}",
                        "PDF 2",
                        "PDF Font Study (Prod)",
                        "CDM1B144V1",
                        "English",
                        "6 (284)"});
#line 383
 testRunner.When("I create Blank PDF", ((string)(null)), table9);
#line 386
 testRunner.And("I generate Blank PDF \"Blank PDF B{Var(num)}\"");
#line 387
 testRunner.And("I wait for PDF \"Blank PDF B{Var(num)}\" to complete");
#line 388
 testRunner.When("I View Blank PDF \"Blank PDF B{Var(num)}\"");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table10.AddRow(new string[] {
                        "&gt"});
            table10.AddRow(new string[] {
                        "&ge"});
            table10.AddRow(new string[] {
                        "&ge;"});
            table10.AddRow(new string[] {
                        "&lt"});
            table10.AddRow(new string[] {
                        "&le"});
            table10.AddRow(new string[] {
                        "&le;"});
            table10.AddRow(new string[] {
                        "&lt;li&gt;"});
            table10.AddRow(new string[] {
                        "&lt;br&gt;"});
#line 389
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table10);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043C A blank PDF that is generated should properly display special character" +
            "s.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "When an EDC form contains special characters such as \"<\" \">\" \"<=\" \">=\" the PDF fi" +
            "le should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043C")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043CABlankPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043C A blank PDF that is generated should properly display special character" +
                    "s.", new string[] {
                        "release_2012.1.0",
                        "US11043C",
                        "Draft"});
#line 403
this.ScenarioSetup(scenarioInfo);
#line 45
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Profile",
                        "Study",
                        "Role",
                        "Locale",
                        "CRFVersion"});
            table11.AddRow(new string[] {
                        "Blank PDF C{RndNum<num>(3)}",
                        "PDF 3",
                        "PDF Font Study (Prod)",
                        "CDM1B144V1",
                        "English",
                        "6 (284)"});
#line 408
 testRunner.When("I create Blank PDF", ((string)(null)), table11);
#line 411
 testRunner.And("I generate Blank PDF \"Blank PDF C{Var(num)}\"");
#line 412
 testRunner.And("I wait for PDF \"Blank PDF C{Var(num)}\" to complete");
#line 413
 testRunner.When("I View Blank PDF \"Blank PDF C{Var(num)}\"");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table12.AddRow(new string[] {
                        "&gt"});
            table12.AddRow(new string[] {
                        "&ge"});
            table12.AddRow(new string[] {
                        "&ge;"});
            table12.AddRow(new string[] {
                        "&lt"});
            table12.AddRow(new string[] {
                        "&le"});
            table12.AddRow(new string[] {
                        "&le;"});
            table12.AddRow(new string[] {
                        "&lt;li&gt;"});
            table12.AddRow(new string[] {
                        "&lt;br&gt;"});
#line 414
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table12);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043D A blank PDF that is generated should properly display special character" +
            "s.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "When an EDC form contains special characters such as \"<\" \">\" \"<=\" \">=\" the PDF fi" +
            "le should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043D")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043DABlankPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043D A blank PDF that is generated should properly display special character" +
                    "s.", new string[] {
                        "release_2012.1.0",
                        "US11043D",
                        "Draft"});
#line 428
this.ScenarioSetup(scenarioInfo);
#line 45
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Profile",
                        "Study",
                        "Role",
                        "Locale",
                        "CRFVersion"});
            table13.AddRow(new string[] {
                        "Blank PDF D{RndNum<num>(3)}",
                        "PDF 4",
                        "PDF Font Study (Prod)",
                        "CDM1B144V1",
                        "Japanese",
                        "6 (284)"});
#line 433
 testRunner.When("I create Blank PDF", ((string)(null)), table13);
#line 436
 testRunner.And("I generate Blank PDF \"Blank PDF D{Var(num)}\"");
#line 437
 testRunner.And("I wait for PDF \"Blank PDF D{Var(num)}\" to complete");
#line 438
 testRunner.When("I View Blank PDF \"Blank PDF D{Var(num)}\"");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table14.AddRow(new string[] {
                        "&gt"});
            table14.AddRow(new string[] {
                        "&ge"});
            table14.AddRow(new string[] {
                        "&ge;"});
            table14.AddRow(new string[] {
                        "&lt"});
            table14.AddRow(new string[] {
                        "&le"});
            table14.AddRow(new string[] {
                        "&le;"});
            table14.AddRow(new string[] {
                        "&lt;li&gt;"});
            table14.AddRow(new string[] {
                        "&lt;br&gt;"});
#line 439
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table14);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043E A blank PDF that is generated should properly display special character" +
            "s.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "When an EDC form contains special characters such as \"<\" \">\" \"<=\" \">=\" the PDF fi" +
            "le should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043E")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043EABlankPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043E A blank PDF that is generated should properly display special character" +
                    "s.", new string[] {
                        "release_2012.1.0",
                        "US11043E",
                        "Draft"});
#line 453
this.ScenarioSetup(scenarioInfo);
#line 45
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Profile",
                        "Study",
                        "Role",
                        "Locale",
                        "CRFVersion"});
            table15.AddRow(new string[] {
                        "Blank PDF E{RndNum<num>(3)}",
                        "PDF 5",
                        "PDF Font Study (Prod)",
                        "CDM1B144V1",
                        "Japanese",
                        "6 (284)"});
#line 458
 testRunner.When("I create Blank PDF", ((string)(null)), table15);
#line 461
 testRunner.And("I generate Blank PDF \"Blank PDF E{Var(num)}\"");
#line 462
 testRunner.And("I wait for PDF \"Blank PDF E{Var(num)}\" to complete");
#line 463
 testRunner.When("I View Blank PDF \"Blank PDF E{Var(num)}\"");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table16.AddRow(new string[] {
                        "&gt"});
            table16.AddRow(new string[] {
                        "&ge"});
            table16.AddRow(new string[] {
                        "&ge;"});
            table16.AddRow(new string[] {
                        "&lt"});
            table16.AddRow(new string[] {
                        "&le"});
            table16.AddRow(new string[] {
                        "&le;"});
            table16.AddRow(new string[] {
                        "&lt;li&gt;"});
            table16.AddRow(new string[] {
                        "&lt;br&gt;"});
#line 464
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table16);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043F A data-populated PDF that is generated should properly display special " +
            "characters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "When an EDC form contains special characters such as \"<\" \">\" \"<=\" \">=\" the PDF fi" +
            "le should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043F")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043FAData_PopulatedPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043F A data-populated PDF that is generated should properly display special " +
                    "characters", new string[] {
                        "release_2012.1.0",
                        "US11043F",
                        "Draft"});
#line 478
this.ScenarioSetup(scenarioInfo);
#line 45
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Profile",
                        "Study",
                        "Role",
                        "Locale",
                        "Site Groups",
                        "Sites",
                        "Subjects"});
            table17.AddRow(new string[] {
                        "Data PDF A{RndNum<num>(3)}",
                        "PDF 1",
                        "PDF Font Study (Prod)",
                        "CDM1B144V1",
                        "English",
                        "World",
                        "PDF Font Site 1",
                        "Sub{Var(num1)}"});
#line 483
 testRunner.When("I create Data PDF", ((string)(null)), table17);
#line 486
 testRunner.And("I generate Data PDF \"Data PDF A{Var(num)}\"");
#line 487
 testRunner.And("I wait for PDF \"Data PDF A{Var(num)}\" to complete");
#line 488
 testRunner.When("I View Data PDF \"Data PDF A{Var(num)}\"");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table18.AddRow(new string[] {
                        "&gt"});
            table18.AddRow(new string[] {
                        "&ge"});
            table18.AddRow(new string[] {
                        "&ge;"});
            table18.AddRow(new string[] {
                        "&lt"});
            table18.AddRow(new string[] {
                        "&le"});
            table18.AddRow(new string[] {
                        "&le;"});
            table18.AddRow(new string[] {
                        "&lt;li&gt;"});
            table18.AddRow(new string[] {
                        "&lt;br&gt;"});
#line 489
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table18);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043G A data-populated PDF that is generated should properly display special " +
            "characters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "When an EDC form contains special characters such as \"<\" \">\" \"<=\" \">=\" the PDF fi" +
            "le should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043G")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043GAData_PopulatedPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043G A data-populated PDF that is generated should properly display special " +
                    "characters", new string[] {
                        "release_2012.1.0",
                        "US11043G",
                        "Draft"});
#line 503
this.ScenarioSetup(scenarioInfo);
#line 45
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Profile",
                        "Study",
                        "Role",
                        "Locale",
                        "Site Groups",
                        "Sites",
                        "Subjects"});
            table19.AddRow(new string[] {
                        "Data PDF B{RndNum<num>(3)}",
                        "PDF 2",
                        "PDF Font Study (Prod)",
                        "CDM1B144V1",
                        "English",
                        "World",
                        "PDF Font Site 1",
                        "Sub{Var(num1)}"});
#line 508
 testRunner.When("I create Data PDF", ((string)(null)), table19);
#line 511
 testRunner.And("I generate Data PDF \"Data PDF B{Var(num)}\"");
#line 512
 testRunner.And("I wait for PDF \"Data PDF B{Var(num)}\" to complete");
#line 513
 testRunner.When("I View Data PDF \"Data PDF B{Var(num)}\"");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table20.AddRow(new string[] {
                        "&gt"});
            table20.AddRow(new string[] {
                        "&ge"});
            table20.AddRow(new string[] {
                        "&ge;"});
            table20.AddRow(new string[] {
                        "&lt"});
            table20.AddRow(new string[] {
                        "&le"});
            table20.AddRow(new string[] {
                        "&le;"});
            table20.AddRow(new string[] {
                        "&lt;li&gt;"});
            table20.AddRow(new string[] {
                        "&lt;br&gt;"});
#line 514
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table20);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043H A data-populated PDF that is generated should properly display special " +
            "characters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "When an EDC form contains special characters such as \"<\" \">\" \"<=\" \">=\" the PDF fi" +
            "le should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043H")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043HAData_PopulatedPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043H A data-populated PDF that is generated should properly display special " +
                    "characters", new string[] {
                        "release_2012.1.0",
                        "US11043H",
                        "Draft"});
#line 528
this.ScenarioSetup(scenarioInfo);
#line 45
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Profile",
                        "Study",
                        "Role",
                        "Locale",
                        "Site Groups",
                        "Sites",
                        "Subjects"});
            table21.AddRow(new string[] {
                        "Data PDF C{RndNum<num>(3)}",
                        "PDF 3",
                        "PDF Font Study (Prod)",
                        "CDM1B144V1",
                        "English",
                        "World",
                        "PDF Font Site 1",
                        "Sub{Var(num1)}"});
#line 533
 testRunner.When("I create Data PDF", ((string)(null)), table21);
#line 536
 testRunner.And("I generate Data PDF \"Data PDF C{Var(num)}\"");
#line 537
 testRunner.And("I wait for PDF \"Data PDF C{Var(num)}\" to complete");
#line 538
 testRunner.When("I View Data PDF \"Data PDF C{Var(num)}\"");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table22.AddRow(new string[] {
                        "&gt"});
            table22.AddRow(new string[] {
                        "&ge"});
            table22.AddRow(new string[] {
                        "&ge;"});
            table22.AddRow(new string[] {
                        "&lt"});
            table22.AddRow(new string[] {
                        "&le"});
            table22.AddRow(new string[] {
                        "&le;"});
            table22.AddRow(new string[] {
                        "&lt;li&gt;"});
            table22.AddRow(new string[] {
                        "&lt;br&gt;"});
#line 539
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table22);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043I A data-populated PDF that is generated should properly display special " +
            "characters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "When an EDC form contains special characters such as \"<\" \">\" \"<=\" \">=\" the PDF fi" +
            "le should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043I")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043IAData_PopulatedPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043I A data-populated PDF that is generated should properly display special " +
                    "characters", new string[] {
                        "release_2012.1.0",
                        "US11043I",
                        "Draft"});
#line 553
this.ScenarioSetup(scenarioInfo);
#line 45
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Profile",
                        "Study",
                        "Role",
                        "Locale",
                        "Site Groups",
                        "Sites",
                        "Subjects"});
            table23.AddRow(new string[] {
                        "Data PDF D{RndNum<num>(3)}",
                        "PDF 4",
                        "PDF Font Study (Prod)",
                        "CDM1B144V1",
                        "English",
                        "World",
                        "PDF Font Site 1",
                        "Sub{Var(num1)}"});
#line 558
 testRunner.When("I create Data PDF", ((string)(null)), table23);
#line 561
 testRunner.And("I generate Data PDF \"Data PDF D{Var(num)}\"");
#line 562
 testRunner.And("I wait for PDF \"Data PDF D{Var(num)}\" to complete");
#line 563
 testRunner.When("I View Data PDF \"Data PDF D{Var(num)}\"");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table24.AddRow(new string[] {
                        "&gt"});
            table24.AddRow(new string[] {
                        "&ge"});
            table24.AddRow(new string[] {
                        "&ge;"});
            table24.AddRow(new string[] {
                        "&lt"});
            table24.AddRow(new string[] {
                        "&le"});
            table24.AddRow(new string[] {
                        "&le;"});
            table24.AddRow(new string[] {
                        "&lt;li&gt;"});
            table24.AddRow(new string[] {
                        "&lt;br&gt;"});
#line 564
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table24);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("@US11043J A data-populated PDF that is generated should properly display special " +
            "characters")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "When an EDC form contains special characters such as \"<\" \">\" \"<=\" \">=\" the PDF fi" +
            "le should display the special characters appropriately.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("release_2012.1.0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("US11043J")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Draft")]
        public virtual void US11043JAData_PopulatedPDFThatIsGeneratedShouldProperlyDisplaySpecialCharacters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("@US11043J A data-populated PDF that is generated should properly display special " +
                    "characters", new string[] {
                        "release_2012.1.0",
                        "US11043J",
                        "Draft"});
#line 578
this.ScenarioSetup(scenarioInfo);
#line 45
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Profile",
                        "Study",
                        "Role",
                        "Locale",
                        "Site Groups",
                        "Sites",
                        "Subjects"});
            table25.AddRow(new string[] {
                        "Data PDF E{RndNum<num>(3)}",
                        "PDF 5",
                        "PDF Font Study (Prod)",
                        "CDM1B144V1",
                        "English",
                        "World",
                        "PDF Font Site 1",
                        "Sub{Var(num1)}"});
#line 583
 testRunner.When("I create Data PDF", ((string)(null)), table25);
#line 586
 testRunner.And("I generate Data PDF \"Data PDF E{Var(num)}\"");
#line 587
 testRunner.And("I wait for PDF \"Data PDF E{Var(num)}\" to complete");
#line 588
 testRunner.When("I View Data PDF \"Data PDF E{Var(num)}\"");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Symbol"});
            table26.AddRow(new string[] {
                        "&gt"});
            table26.AddRow(new string[] {
                        "&ge"});
            table26.AddRow(new string[] {
                        "&ge;"});
            table26.AddRow(new string[] {
                        "&lt"});
            table26.AddRow(new string[] {
                        "&le"});
            table26.AddRow(new string[] {
                        "&le;"});
            table26.AddRow(new string[] {
                        "&lt;li&gt;"});
            table26.AddRow(new string[] {
                        "&lt;br&gt;"});
#line 589
 testRunner.Then("the text should not contain \"<Symbol>\"", ((string)(null)), table26);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
