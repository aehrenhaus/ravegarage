// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Medidata.RBT.Features.Rave.Features.EDC
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class QueryRefiringLogicFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "564QueryRefiringLogic5_LabForm_2FldEC.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Query Refiring Logic", "As a Rave user\r\nWhen I manually close a query or cancel, the query should not re-" +
                    "fire if the exact same data is entered into the system\r\nSo that I dont have to r" +
                    "e-enter the exact same response", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Query Refiring Logic")))
            {
                Medidata.RBT.Features.Rave.Features.EDC.QueryRefiringLogicFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 12
#line 13
    testRunner.Given("I am logged in to Rave with username \"defuser\" and password \"password\"");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Study",
                        "Role",
                        "Site",
                        "Site Number"});
            table1.AddRow(new string[] {
                        "User 1",
                        "Standard Study",
                        "cdm1",
                        "Site 1",
                        "S100"});
#line 14
 testRunner.And("following Study assignments exist", ((string)(null)), table1);
#line 17
 testRunner.And("Role \"cdm1\" has Action \"Query\"");
#line 18
 testRunner.And("Study \"Standard Study\" has Draft \"<Draft1>\"");
#line 19
 testRunner.And("I publish and push \"CRF Version<RANDOMNUMBER>\" to site \"Site 1\"");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_5.1.1 As an EDC user, when I entered bad data in lab field A and lab field B that resulted in the system opening a query on lab field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in lab field A, if I then entered the same bad data in lab field A as when the query was closed, then the system should not refire a query on lab field B.  Query with requires response = true and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Query Refiring Logic")]
        public virtual void PB_5_1_1AsAnEDCUserWhenIEnteredBadDataInLabFieldAAndLabFieldBThatResultedInTheSystemOpeningAQueryOnLabFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedAndIEnteredGoodDataInLabFieldAIfIThenEnteredTheSameBadDataInLabFieldAAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLabFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_5.1.1 As an EDC user, when I entered bad data in lab field A and lab field B that resulted in the system opening a query on lab field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in lab field A, if I then entered the same bad data in lab field A as when the query was closed, then the system should not refire a query on lab field B.  Query with requires response = true and requires manual close = true.", new string[] {
                        "release_564_Patch11",
                        "PB_5.1.1",
                        "Draft"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 12
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Subject Number",
                        "{NextSubjectNum<num1>(Edit Check Study 3,prod,Subject Number)}"});
            table2.AddRow(new string[] {
                        "Subject Initials",
                        "SUB7001A"});
#line 28
 testRunner.And("I create a Subject", ((string)(null)), table2);
#line 32
 testRunner.And("I am on form \"Lab Form 8\" for the Subject \"SUB7001A\"");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Lab field 1",
                        "5"});
            table3.AddRow(new string[] {
                        "Lab field 2",
                        "3"});
#line 33
 testRunner.And("I have submitted the following values for the \"Lab Form 8\" form", ((string)(null)), table3);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message"});
            table4.AddRow(new string[] {
                        "Lab field 2",
                        "Lab Field 2 must be greater than Lab Field 1. Please verify."});
#line 37
 testRunner.And("I see open query for the following fields", ((string)(null)), table4);
#line 40
 testRunner.And("I take screenshot 1 of 4");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Response"});
            table5.AddRow(new string[] {
                        "Lab field 2",
                        "Data will be changed."});
#line 41
 testRunner.When("I answer query", ((string)(null)), table5);
#line 44
 testRunner.And("I save the CRF page");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field"});
            table6.AddRow(new string[] {
                        "Lab field 2"});
#line 45
 testRunner.When("I close query", ((string)(null)), table6);
#line 48
 testRunner.And("I save the CRF page");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field"});
            table7.AddRow(new string[] {
                        "Lab field 2"});
#line 49
 testRunner.Then("I should see closed query", ((string)(null)), table7);
#line 52
 testRunner.And("I take screenshot 2 of 4");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "Lab field 1",
                        "2"});
#line 53
 testRunner.When("I submit the following values for the \"Lab Form 8\" form", ((string)(null)), table8);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field"});
            table9.AddRow(new string[] {
                        "Lab field 2"});
#line 56
 testRunner.Then("I should not see new open query for the following fields", ((string)(null)), table9);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "Lab field 1",
                        "5"});
#line 59
 testRunner.When("I submit the following values for the \"Lab Form 8\" form", ((string)(null)), table10);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field"});
            table11.AddRow(new string[] {
                        "Lab field 2"});
#line 62
 testRunner.Then("I should not see new open query for the following fields", ((string)(null)), table11);
#line 65
 testRunner.And("I take screenshot 3 of 4");
#line 66
 testRunner.When("I run SQL Script \"Query Logging Script\"");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProjectName",
                        "SiteNumber",
                        "SiteName",
                        "Environment",
                        "SubjectName",
                        "CheckActionInstanceName",
                        "CheckActionInstanceDataPageName",
                        "CheckActionRecordPosition",
                        "CheckActionFieldName",
                        "CheckActionFieldData",
                        "TriggerFieldInstanceName",
                        "TriggerFieldInstanceDatapageName",
                        "TriggerFieldRecordPosition",
                        "TriggerFieldName",
                        "TriggerFieldData",
                        "EditCheckName",
                        "MarkingGroupName",
                        "QueryMessage",
                        "EventTime"});
            table12.AddRow(new string[] {
                        "Standard Study",
                        "S100",
                        "Site 1",
                        "PROD",
                        "SUB7001A",
                        "<null>",
                        "Lab Form 8",
                        "0",
                        "Lab field 2",
                        "3",
                        "<null>",
                        "Lab Form 8",
                        "0",
                        "Lab field 1",
                        "5",
                        "EC37",
                        "Site",
                        "Lab Field 2 must be greater than Lab Field 1. Please verify.",
                        "{DateTime}"});
#line 67
 testRunner.Then("I should see the logging data for queries", ((string)(null)), table12);
#line 70
 testRunner.And("I take screenshot 4 of 4");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
