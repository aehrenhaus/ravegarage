// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Medidata.RBT.Features.Rave.Features.EDC
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class QueryRefiringLogic_LogForm_MultiFldECFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "QueryRefiringLogic_LogForm_MultiFldEC.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "QueryRefiringLogic_LogForm_MultiFldEC", "As a Rave user\r\nWhen I manually close a query or cancel, the query should not re-" +
                    "fire if the exact same data is entered into the system\r\nSo that I don\'t have to " +
                    "re-enter the exact same response", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "QueryRefiringLogic_LogForm_MultiFldEC")))
            {
                Medidata.RBT.Features.Rave.Features.EDC.QueryRefiringLogic_LogForm_MultiFldECFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
    testRunner.Given("I am logged in to Rave with username \"defuser\" and password \"password\"");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "User",
                        "Study",
                        "Role",
                        "Site",
                        "Site Number"});
            table1.AddRow(new string[] {
                        "User 1",
                        "Standard Study",
                        "cdm1",
                        "Site 1",
                        "S100"});
#line 8
 testRunner.And("following Study assignments exist", ((string)(null)), table1);
#line 11
 testRunner.And("I select Study \"Standard Study\" and Site \"Site 1\"");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_US12940_01A As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_01AAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedAndIEnteredGoodDataInLogFieldAIfIThenEnteredTheSameBadDataInLogFieldAAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_US12940_01A As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = true.", new string[] {
                        "PB_US12940_01A"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table2.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table2.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table2.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 16
    testRunner.And("I create a Subject", ((string)(null)), table2);
#line 21
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table3.AddRow(new string[] {
                        "Log Field 1",
                        ""});
            table3.AddRow(new string[] {
                        "Log Field 2",
                        "data2"});
            table3.AddRow(new string[] {
                        "Log Field 3",
                        "data3"});
#line 22
 testRunner.And("I enter data in CRF and save", ((string)(null)), table3);
#line 27
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table4.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false"});
#line 28
 testRunner.And("I verify Query is displayed", ((string)(null)), table4);
#line 31
 testRunner.And("I take a screenshot");
#line 32
 testRunner.And("I answer the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "3\" with \"Data will be changed.\"");
#line 33
 testRunner.And("I save the CRF page");
#line 34
 testRunner.And("I take a screenshot");
#line 35
 testRunner.And("I open log line 1");
#line 36
 testRunner.And("I close the Query \"Answer must be provided. Please review.\" on Field \"Log Field 3" +
                    "\"");
#line 37
 testRunner.And("I save the CRF page");
#line 38
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Message",
                        "Closed"});
            table5.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false"});
#line 39
 testRunner.And("I verify Query is not displayed", ((string)(null)), table5);
#line 42
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table6.AddRow(new string[] {
                        "Log Field 1",
                        "data1"});
#line 43
 testRunner.And("I enter data in CRF and save", ((string)(null)), table6);
#line 46
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Message",
                        "Closed"});
            table7.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false"});
#line 47
 testRunner.And("I verify Query is not displayed", ((string)(null)), table7);
#line 50
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table8.AddRow(new string[] {
                        "Log Field 1",
                        ""});
#line 51
 testRunner.And("I enter data in CRF and save", ((string)(null)), table8);
#line 54
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Message",
                        "Closed"});
            table9.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false"});
#line 55
 testRunner.And("I verify Query is not displayed", ((string)(null)), table9);
#line 58
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_US12940_01B As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_01BAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedAndIEnteredGoodDataInLogFieldAIfIThenEnteredTheSameBadDataInLogFieldAAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_US12940_01B As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = false.", new string[] {
                        "PB_US12940_01B"});
#line 61
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table10.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table10.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table10.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 63
    testRunner.And("I create a Subject", ((string)(null)), table10);
#line 68
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table11.AddRow(new string[] {
                        "Log Field 4",
                        ""});
            table11.AddRow(new string[] {
                        "Log Field 5",
                        "data5"});
            table11.AddRow(new string[] {
                        "Log Field 6",
                        "data6"});
#line 69
 testRunner.And("I enter data in CRF and save", ((string)(null)), table11);
#line 74
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table12.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false"});
#line 75
 testRunner.And("I verify Query is displayed", ((string)(null)), table12);
#line 78
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table13.AddRow(new string[] {
                        "Log Field 4",
                        "data4"});
#line 79
 testRunner.And("I enter data in CRF and save", ((string)(null)), table13);
#line 82
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table14.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false"});
#line 83
 testRunner.And("I verify Query is not displayed", ((string)(null)), table14);
#line 86
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table15.AddRow(new string[] {
                        "Log Field 4",
                        ""});
#line 87
 testRunner.And("I enter data in CRF and save", ((string)(null)), table15);
#line 90
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table16.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false"});
#line 91
 testRunner.And("I verify Query is displayed", ((string)(null)), table16);
#line 94
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_US12940_01C As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_01CAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedAndIEnteredGoodDataInLogFieldAIfIThenEnteredTheSameBadDataInLogFieldAAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_US12940_01C As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = false.", new string[] {
                        "PB_US12940_01C"});
#line 97
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table17.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table17.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table17.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 99
    testRunner.And("I create a Subject", ((string)(null)), table17);
#line 104
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table18.AddRow(new string[] {
                        "Log Field 7",
                        ""});
            table18.AddRow(new string[] {
                        "Log Field 8",
                        "data8"});
            table18.AddRow(new string[] {
                        "Log Field 9",
                        "data9"});
#line 105
 testRunner.And("I enter data in CRF and save", ((string)(null)), table18);
#line 110
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table19.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false"});
#line 111
 testRunner.And("I verify Query is displayed", ((string)(null)), table19);
#line 114
 testRunner.And("I take a screenshot");
#line 115
 testRunner.And("I answer the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "9\" with \"Data will be changed.\"");
#line 116
 testRunner.And("I save the CRF page");
#line 117
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table20.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false"});
#line 118
 testRunner.And("I verify Query is not displayed", ((string)(null)), table20);
#line 121
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table21.AddRow(new string[] {
                        "Log Field 7",
                        "data7"});
#line 122
 testRunner.And("I enter data in CRF and save", ((string)(null)), table21);
#line 125
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table22.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false"});
#line 126
 testRunner.And("I verify Query is not displayed", ((string)(null)), table22);
#line 129
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table23.AddRow(new string[] {
                        "Log Field 7",
                        ""});
#line 130
 testRunner.And("I enter data in CRF and save", ((string)(null)), table23);
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table24.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false"});
#line 133
 testRunner.And("I verify Query is not displayed", ((string)(null)), table24);
#line 136
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_US12940_01D As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void PB_US12940_01DAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedAndIEnteredGoodDataInLogFieldAIfIThenEnteredTheSameBadDataInLogFieldAAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_US12940_01D As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = true.", new string[] {
                        "PB_US12940_01D",
                        "ignore"});
#line 141
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table25.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table25.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table25.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 143
 testRunner.And("I create a Subject", ((string)(null)), table25);
#line 148
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table26.AddRow(new string[] {
                        "Log Field 10",
                        ""});
            table26.AddRow(new string[] {
                        "Log Field 11",
                        "data11"});
            table26.AddRow(new string[] {
                        "Log Field 12",
                        "data12"});
#line 149
 testRunner.And("I enter data in CRF and save", ((string)(null)), table26);
#line 154
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table27.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false"});
#line 155
 testRunner.And("I verify Query is displayed", ((string)(null)), table27);
#line 158
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table28.AddRow(new string[] {
                        "Log Field 10",
                        "data10"});
#line 159
 testRunner.And("I enter data in CRF and save", ((string)(null)), table28);
#line 162
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Message",
                        "Closed",
                        "Answered"});
            table29.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "true"});
#line 163
 testRunner.And("I verify Query is displayed", ((string)(null)), table29);
#line 166
 testRunner.And("I take a screenshot");
#line 167
 testRunner.And("I close the Query \"Answer must be provided. Please review.\" on Field \"Log Field 1" +
                    "2\"");
#line 168
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table30.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false"});
#line 169
 testRunner.And("I verify Query is not displayed", ((string)(null)), table30);
#line 172
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table31.AddRow(new string[] {
                        "Log Field 10",
                        ""});
#line 173
 testRunner.And("I enter data in CRF and save", ((string)(null)), table31);
#line 176
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table32.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false"});
#line 177
 testRunner.And("I verify Query is displayed", ((string)(null)), table32);
#line 180
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_US12940_02A As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was closed, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_02AAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedAndIEnteredGoodDataInLogFieldBIfIThenEnteredTheSameBadDataInLogFieldBAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_US12940_02A As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was closed, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = true.", new string[] {
                        "PB_US12940_02A"});
#line 183
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table33.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table33.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table33.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 185
    testRunner.And("I create a Subject", ((string)(null)), table33);
#line 190
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table34.AddRow(new string[] {
                        "Log Field 1",
                        "data1"});
            table34.AddRow(new string[] {
                        "Log Field 2",
                        "data2"});
            table34.AddRow(new string[] {
                        "Log Field 3",
                        ""});
#line 191
 testRunner.And("I enter data in CRF and save", ((string)(null)), table34);
#line 196
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table35.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false"});
#line 197
 testRunner.And("I verify Query is displayed", ((string)(null)), table35);
#line 200
 testRunner.And("I take a screenshot");
#line 201
 testRunner.And("I answer the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "3\" with \"Data will be changed.\"");
#line 202
 testRunner.And("I save the CRF page");
#line 203
 testRunner.And("I open log line 1");
#line 204
 testRunner.And("I close the Query \"Answer must be provided. Please review.\" on Field \"Log Field 3" +
                    "\"");
#line 205
 testRunner.And("I save the CRF page");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Message",
                        "Closed"});
            table36.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false"});
#line 206
 testRunner.And("I verify Query is not displayed", ((string)(null)), table36);
#line 209
 testRunner.And("I take a screenshot");
#line 210
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table37.AddRow(new string[] {
                        "Log Field 3",
                        "data3"});
#line 211
 testRunner.And("I enter data in CRF and save", ((string)(null)), table37);
#line 214
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Message",
                        "Closed"});
            table38.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false"});
#line 215
 testRunner.And("I verify Query is not displayed", ((string)(null)), table38);
#line 218
 testRunner.And("I take a screenshot");
#line 219
   testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table39.AddRow(new string[] {
                        "Log Field 3",
                        ""});
#line 220
 testRunner.And("I enter data in CRF and save", ((string)(null)), table39);
#line 223
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Message",
                        "Closed"});
            table40.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false"});
#line 224
 testRunner.And("I verify Query is not displayed", ((string)(null)), table40);
#line 227
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_US12940_02B As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was closed, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_02BAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedAndIEnteredGoodDataInLogFieldBIfIThenEnteredTheSameBadDataInLogFieldBAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_US12940_02B As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was closed, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = false.", new string[] {
                        "PB_US12940_02B"});
#line 230
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table41.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table41.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table41.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 232
    testRunner.And("I create a Subject", ((string)(null)), table41);
#line 237
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table42.AddRow(new string[] {
                        "Log Field 4",
                        "data4"});
            table42.AddRow(new string[] {
                        "Log Field 5",
                        "data5"});
            table42.AddRow(new string[] {
                        "Log Field 6",
                        ""});
#line 238
 testRunner.And("I enter data in CRF and save", ((string)(null)), table42);
#line 243
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "CLosed"});
            table43.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false"});
#line 244
 testRunner.And("I verify Query is displayed", ((string)(null)), table43);
#line 247
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table44.AddRow(new string[] {
                        "Log Field 6",
                        "data6"});
#line 248
 testRunner.And("I enter data in CRF and save", ((string)(null)), table44);
#line 251
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "CLosed"});
            table45.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false"});
#line 252
 testRunner.And("I verify Query is not displayed", ((string)(null)), table45);
#line 255
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table46.AddRow(new string[] {
                        "Log Field 6",
                        ""});
#line 256
 testRunner.And("I enter data in CRF and save", ((string)(null)), table46);
#line 259
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "CLosed"});
            table47.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false"});
#line 260
 testRunner.And("I verify Query is displayed", ((string)(null)), table47);
#line 263
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_US12940_02C As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was closed, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_02CAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedAndIEnteredGoodDataInLogFieldBIfIThenEnteredTheSameBadDataInLogFieldBAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_US12940_02C As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was closed, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = false.", new string[] {
                        "PB_US12940_02C"});
#line 266
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table48.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table48.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table48.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 268
    testRunner.And("I create a Subject", ((string)(null)), table48);
#line 273
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table49.AddRow(new string[] {
                        "Log Field 7",
                        "data7"});
            table49.AddRow(new string[] {
                        "Log Field 8",
                        "data8"});
            table49.AddRow(new string[] {
                        "Log Field 9",
                        ""});
#line 274
 testRunner.And("I enter data in CRF and save", ((string)(null)), table49);
#line 279
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table50.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false"});
#line 280
 testRunner.And("I verify Query is displayed", ((string)(null)), table50);
#line 283
 testRunner.And("I take a screenshot");
#line 284
 testRunner.And("I answer the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "9\" with \"Data will be changed.\"");
#line 285
 testRunner.And("I save the CRF page");
#line 286
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Message",
                        "Closed"});
            table51.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false"});
#line 287
 testRunner.And("I verify Query is not displayed", ((string)(null)), table51);
#line 290
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table52.AddRow(new string[] {
                        "Log Field 9",
                        "data9"});
#line 291
 testRunner.And("I enter data in CRF and save", ((string)(null)), table52);
#line 294
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Message",
                        "Closed"});
            table53.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false"});
#line 295
 testRunner.And("I verify Query is not displayed", ((string)(null)), table53);
#line 298
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table54.AddRow(new string[] {
                        "Log Field 9",
                        ""});
#line 299
 testRunner.And("I enter data in CRF and save", ((string)(null)), table54);
#line 302
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Message",
                        "Closed"});
            table55.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false"});
#line 303
 testRunner.And("I verify Query is not displayed", ((string)(null)), table55);
#line 306
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_US12940_02D As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was closed, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_02DAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedAndIEnteredGoodDataInLogFieldBIfIThenEnteredTheSameBadDataInLogFieldBAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_US12940_02D As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was closed, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = true.", new string[] {
                        "PB_US12940_02D"});
#line 309
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table56.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table56.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table56.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 311
 testRunner.And("I create a Subject", ((string)(null)), table56);
#line 316
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table57.AddRow(new string[] {
                        "Log Field 10",
                        "data10"});
            table57.AddRow(new string[] {
                        "Log Field 11",
                        "data11"});
            table57.AddRow(new string[] {
                        "Log Field 12",
                        ""});
#line 317
 testRunner.And("I enter data in CRF and save", ((string)(null)), table57);
#line 322
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table58.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false"});
#line 323
 testRunner.And("I verify Query is displayed", ((string)(null)), table58);
#line 326
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table59.AddRow(new string[] {
                        "Log Field 12",
                        "data12"});
#line 327
 testRunner.And("I enter data in CRF and save", ((string)(null)), table59);
#line 330
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table60.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false"});
#line 331
 testRunner.And("I verify Query is displayed", ((string)(null)), table60);
#line 334
 testRunner.And("I take a screenshot");
#line 335
 testRunner.And("I close the Query \"Answer must be provided. Please review.\" on Field \"Log Field 1" +
                    "2\"");
#line 336
 testRunner.And("I save the CRF page");
#line 337
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table61.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false"});
#line 338
 testRunner.And("I verify Query is not displayed", ((string)(null)), table61);
#line 341
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table62.AddRow(new string[] {
                        "Log Field 12",
                        ""});
#line 342
 testRunner.And("I enter data in CRF and save", ((string)(null)), table62);
#line 345
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table63.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false"});
#line 346
 testRunner.And("I verify Query is displayed", ((string)(null)), table63);
#line 349
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_US12940_03A As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I entered good data in log field A and then again entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_03AAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryAndIChangedTheDataInLogFieldAToAnotherBadDataAndTheQueryIsThenClosedIfIEnteredGoodDataInLogFieldAAndThenAgainEnteredTheSameBadDataInLogFieldAAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_US12940_03A As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I entered good data in log field A and then again entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = true.", new string[] {
                        "PB_US12940_03A"});
#line 352
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table64.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table64.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table64.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 354
    testRunner.And("I create a Subject", ((string)(null)), table64);
#line 359
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table65.AddRow(new string[] {
                        "Log Field 1",
                        ""});
            table65.AddRow(new string[] {
                        "Log Field 2",
                        "data2"});
            table65.AddRow(new string[] {
                        "Log Field 3",
                        "data3"});
#line 360
 testRunner.And("I enter data in CRF and save", ((string)(null)), table65);
#line 365
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table66.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false"});
#line 366
 testRunner.And("I verify Query is displayed", ((string)(null)), table66);
#line 369
 testRunner.And("I take a screenshot");
#line 370
 testRunner.And("I answer the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "3\" with \"Data will be changed.\"");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table67.AddRow(new string[] {
                        "Log Field 1",
                        "data1"});
            table67.AddRow(new string[] {
                        "Log Field 2",
                        ""});
#line 371
 testRunner.And("I enter data in CRF and save", ((string)(null)), table67);
#line 375
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Message",
                        "Closed",
                        "Answered"});
            table68.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false",
                        "true"});
#line 376
 testRunner.And("I verify Query is displayed", ((string)(null)), table68);
#line 379
 testRunner.And("I take a screenshot");
#line 380
 testRunner.And("I close the Query \"Answer must be provided. Please review.\" on Field \"Log Field 3" +
                    "\"");
#line 381
 testRunner.And("I save the CRF page");
#line 382
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table69.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false"});
#line 383
 testRunner.And("I verify Query is not displayed", ((string)(null)), table69);
#line 386
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table70.AddRow(new string[] {
                        "Log Field 2",
                        "Data2"});
#line 387
 testRunner.And("I enter data in CRF and save", ((string)(null)), table70);
#line 390
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table71.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false"});
#line 391
 testRunner.And("I verify Query is not displayed", ((string)(null)), table71);
#line 394
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table72.AddRow(new string[] {
                        "Log Field 2",
                        ""});
#line 395
 testRunner.And("I enter data in CRF and save", ((string)(null)), table72);
#line 398
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table73.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false"});
#line 399
 testRunner.And("I verify Query is not displayed", ((string)(null)), table73);
#line 402
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_US12940_03B As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I entered good data in log field A and then again entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_03BAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryAndIChangedTheDataInLogFieldAToAnotherBadDataAndTheQueryIsThenClosedIfIEnteredGoodDataInLogFieldAAndThenAgainEnteredTheSameBadDataInLogFieldAAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_US12940_03B As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I entered good data in log field A and then again entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = false.", new string[] {
                        "PB_US12940_03B"});
#line 405
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table74.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table74.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table74.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 407
    testRunner.And("I create a Subject", ((string)(null)), table74);
#line 412
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table75.AddRow(new string[] {
                        "Log Field 4",
                        ""});
            table75.AddRow(new string[] {
                        "Log Field 5",
                        "data5"});
            table75.AddRow(new string[] {
                        "Log Field 6",
                        "data6"});
#line 413
 testRunner.And("I enter data in CRF and save", ((string)(null)), table75);
#line 418
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table76.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false"});
#line 419
 testRunner.And("I verify Query is displayed", ((string)(null)), table76);
#line 422
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table77.AddRow(new string[] {
                        "Log Field 4",
                        "data4"});
            table77.AddRow(new string[] {
                        "Log Field 5",
                        ""});
#line 423
 testRunner.And("I enter data in CRF and save", ((string)(null)), table77);
#line 427
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table78.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false"});
#line 428
 testRunner.And("I verify Query is displayed", ((string)(null)), table78);
#line 431
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table79.AddRow(new string[] {
                        "Log Field 5",
                        "Data5"});
#line 432
 testRunner.And("I enter data in CRF and save", ((string)(null)), table79);
#line 435
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table80.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false"});
#line 436
 testRunner.And("I verify Query is not displayed", ((string)(null)), table80);
#line 439
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table81.AddRow(new string[] {
                        "Log Field 5",
                        ""});
#line 440
 testRunner.And("I enter data in CRF and save", ((string)(null)), table81);
#line 443
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table82.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false"});
#line 444
 testRunner.And("I verify Query is displayed", ((string)(null)), table82);
#line 447
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_US12940_03C As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I entered good data in log field A and then again entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_03CAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryAndIChangedTheDataInLogFieldAToAnotherBadDataAndTheQueryIsThenClosedIfIEnteredGoodDataInLogFieldAAndThenAgainEnteredTheSameBadDataInLogFieldAAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_US12940_03C As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I entered good data in log field A and then again entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = false.", new string[] {
                        "PB_US12940_03C"});
#line 450
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table83.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table83.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table83.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 452
    testRunner.And("I create a Subject", ((string)(null)), table83);
#line 457
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table84.AddRow(new string[] {
                        "Log Field 7",
                        ""});
            table84.AddRow(new string[] {
                        "Log Field 8",
                        "data8"});
            table84.AddRow(new string[] {
                        "Log Field 9",
                        "data9"});
#line 458
 testRunner.And("I enter data in CRF and save", ((string)(null)), table84);
#line 463
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table85.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false"});
#line 464
 testRunner.And("I verify Query is displayed", ((string)(null)), table85);
#line 467
 testRunner.And("I take a screenshot");
#line 468
 testRunner.And("I answer the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "9\" with \"Data will be changed.\"");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table86.AddRow(new string[] {
                        "Log Field 7",
                        "data7"});
            table86.AddRow(new string[] {
                        "Log Field 8",
                        ""});
#line 469
 testRunner.And("I enter data in CRF and save", ((string)(null)), table86);
#line 473
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table87.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false"});
#line 474
 testRunner.And("I verify Query is displayed", ((string)(null)), table87);
#line 477
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table88.AddRow(new string[] {
                        "Log Field 8",
                        "Data8"});
#line 478
 testRunner.And("I enter data in CRF and save", ((string)(null)), table88);
#line 481
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table89.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false"});
#line 482
 testRunner.And("I verify Query is not displayed", ((string)(null)), table89);
#line 485
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table90.AddRow(new string[] {
                        "Log Field 8",
                        ""});
#line 486
 testRunner.And("I enter data in CRF and save", ((string)(null)), table90);
#line 489
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table91.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false"});
#line 490
 testRunner.And("I verify Query is displayed", ((string)(null)), table91);
#line 493
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB_US12940_03D As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I entered good data in log field A and then again entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        public virtual void PB_US12940_03DAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryAndIChangedTheDataInLogFieldAToAnotherBadDataAndTheQueryIsThenClosedIfIEnteredGoodDataInLogFieldAAndThenAgainEnteredTheSameBadDataInLogFieldAAsWhenTheQueryWasClosedThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB_US12940_03D As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I entered good data in log field A and then again entered the same bad data in log field A as when the query was closed, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = true.", new string[] {
                        "PB_US12940_03D",
                        "ignore"});
#line 498
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table92.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table92.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table92.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 500
 testRunner.And("I create a Subject", ((string)(null)), table92);
#line 505
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table93.AddRow(new string[] {
                        "Log Field 10",
                        ""});
            table93.AddRow(new string[] {
                        "Log Field 11",
                        "data11"});
            table93.AddRow(new string[] {
                        "Log Field 12",
                        "data12"});
#line 506
 testRunner.And("I enter data in CRF and save", ((string)(null)), table93);
#line 511
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table94.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false"});
#line 512
 testRunner.And("I verify Query is displayed", ((string)(null)), table94);
#line 515
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table95.AddRow(new string[] {
                        "Log Field 10",
                        "data10"});
            table95.AddRow(new string[] {
                        "Log Field 11",
                        ""});
#line 516
 testRunner.And("I enter data in CRF and save", ((string)(null)), table95);
#line 520
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Message",
                        "Closed",
                        "Answered"});
            table96.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "true"});
#line 521
 testRunner.And("I verify Query is displayed", ((string)(null)), table96);
#line 524
 testRunner.And("I take a screenshot");
#line 525
 testRunner.And("I close the Query \"Answer must be provided. Please review.\" on Field \"Log Field 1" +
                    "2\"");
#line 526
 testRunner.And("I save the CRF page");
#line 527
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table97.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false"});
#line 528
 testRunner.And("I verify Query is not displayed", ((string)(null)), table97);
#line 531
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table98.AddRow(new string[] {
                        "Log Field 11",
                        "Data11"});
#line 532
 testRunner.And("I enter data in CRF and save", ((string)(null)), table98);
#line 535
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table99.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false"});
#line 536
 testRunner.And("I verify Query is not displayed", ((string)(null)), table99);
#line 539
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table100.AddRow(new string[] {
                        "Log Field 11",
                        ""});
#line 540
 testRunner.And("I enter data in CRF and save", ((string)(null)), table100);
#line 543
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Closed"});
            table101.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false"});
#line 544
 testRunner.And("I verify Query is not displayed", ((string)(null)), table101);
#line 547
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-04A As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I then entered the original bad data in log field A, then the system should refire a query on log field B. Query with requires response = true and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_04AAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryAndIChangedTheDataInLogFieldAToAnotherBadDataAndTheQueryIsThenClosedIfIThenEnteredTheOriginalBadDataInLogFieldAThenTheSystemShouldRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-04A As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I then entered the original bad data in log field A, then the system should refire a query on log field B. Query with requires response = true and requires manual close = true.", new string[] {
                        "PB-US12940-04A"});
#line 550
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table102.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table102.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table102.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 552
    testRunner.And("I create a Subject", ((string)(null)), table102);
#line 557
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table103.AddRow(new string[] {
                        "Log Field 1",
                        ""});
            table103.AddRow(new string[] {
                        "Log Field 2",
                        "data2"});
            table103.AddRow(new string[] {
                        "Log Field 3",
                        "data3"});
#line 558
 testRunner.And("I enter data in CRF and save", ((string)(null)), table103);
#line 563
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table104.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 564
    testRunner.And("I verify Query is displayed", ((string)(null)), table104);
#line 567
 testRunner.And("I take a screenshot");
#line 568
 testRunner.And("I answer the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "3\" with \"Data will be changed.\"");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table105.AddRow(new string[] {
                        "Log Field 1",
                        "data1"});
            table105.AddRow(new string[] {
                        "Log Field 2",
                        ""});
#line 569
 testRunner.And("I enter data in CRF and save", ((string)(null)), table105);
#line 573
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table106.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "true",
                        "false"});
#line 574
 testRunner.And("I verify Query is displayed", ((string)(null)), table106);
#line 577
 testRunner.And("I take a screenshot");
#line 578
 testRunner.And("I close the only Query on Field \"Log Field 3\"");
#line 579
 testRunner.And("I save the CRF page");
#line 580
 testRunner.And("I open log line 1");
#line 581
 testRunner.And("I verify closed Query with message \"Answer must be provided. Please review.\" is d" +
                    "isplayed on Field \"Log Field 3\"");
#line 582
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table107.AddRow(new string[] {
                        "Log Field 1",
                        ""});
            table107.AddRow(new string[] {
                        "Log Field 2",
                        "data2"});
#line 583
 testRunner.When("I enter data in CRF and save", ((string)(null)), table107);
#line 587
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table108.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 588
 testRunner.Then("I verify Query is displayed", ((string)(null)), table108);
#line 591
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-04B As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I then entered the original bad data in log field A, then the system should refire a query on log field B. Query with requires response = false and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_04BAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryAndIChangedTheDataInLogFieldAToAnotherBadDataAndTheQueryIsThenClosedIfIThenEnteredTheOriginalBadDataInLogFieldAThenTheSystemShouldRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-04B As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I then entered the original bad data in log field A, then the system should refire a query on log field B. Query with requires response = false and requires manual close = false.", new string[] {
                        "PB-US12940-04B"});
#line 594
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table109.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table109.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table109.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 596
    testRunner.And("I create a Subject", ((string)(null)), table109);
#line 601
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table110.AddRow(new string[] {
                        "Log Field 4",
                        ""});
            table110.AddRow(new string[] {
                        "Log Field 5",
                        "data5"});
            table110.AddRow(new string[] {
                        "Log Field 6",
                        "data6"});
#line 602
 testRunner.And("I enter data in CRF and save", ((string)(null)), table110);
#line 607
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table111.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 608
 testRunner.And("I verify Query is displayed", ((string)(null)), table111);
#line 611
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table112.AddRow(new string[] {
                        "Log Field 4",
                        "data4"});
            table112.AddRow(new string[] {
                        "Log Field 5",
                        ""});
#line 612
 testRunner.And("I enter data in CRF and save", ((string)(null)), table112);
#line 616
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table113.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 617
 testRunner.Then("I verify Query is displayed", ((string)(null)), table113);
#line 620
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table114.AddRow(new string[] {
                        "Log Field 4",
                        ""});
            table114.AddRow(new string[] {
                        "Log Field 5",
                        "data5"});
#line 621
 testRunner.When("I enter data in CRF and save", ((string)(null)), table114);
#line 625
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table115.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 626
 testRunner.Then("I verify Query is displayed", ((string)(null)), table115);
#line 629
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-04C As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I then entered the original bad data in log field A, then the system should refire a query on log field B. Query with requires response = true and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_04CAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryAndIChangedTheDataInLogFieldAToAnotherBadDataAndTheQueryIsThenClosedIfIThenEnteredTheOriginalBadDataInLogFieldAThenTheSystemShouldRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-04C As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I then entered the original bad data in log field A, then the system should refire a query on log field B. Query with requires response = true and requires manual close = false.", new string[] {
                        "PB-US12940-04C"});
#line 632
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table116.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table116.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table116.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 634
    testRunner.And("I create a Subject", ((string)(null)), table116);
#line 639
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table117.AddRow(new string[] {
                        "Log Field 7",
                        ""});
            table117.AddRow(new string[] {
                        "Log Field 8",
                        "data8"});
            table117.AddRow(new string[] {
                        "Log Field 9",
                        "data9"});
#line 640
 testRunner.And("I enter data in CRF and save", ((string)(null)), table117);
#line 645
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table118.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 646
 testRunner.And("I verify Query is displayed", ((string)(null)), table118);
#line 649
 testRunner.And("I take a screenshot");
#line 650
 testRunner.And("I answer the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "9\" with \"Data will be changed.\"");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table119.AddRow(new string[] {
                        "Log Field 7",
                        "data7"});
            table119.AddRow(new string[] {
                        "Log Field 8",
                        ""});
#line 651
 testRunner.And("I enter data in CRF and save", ((string)(null)), table119);
#line 655
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table120.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "true",
                        "true"});
#line 656
    testRunner.And("I verify Query is not displayed", ((string)(null)), table120);
#line 659
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table121.AddRow(new string[] {
                        "Log Field 7",
                        ""});
            table121.AddRow(new string[] {
                        "Log Field 8",
                        "data8"});
#line 660
 testRunner.When("I enter data in CRF and save", ((string)(null)), table121);
#line 664
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table122.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 665
 testRunner.Then("I verify Query is displayed", ((string)(null)), table122);
#line 668
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-04D As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I then entered the original bad data in log field A, then the system should refire a query on log field B. Query with requires response = false and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_04DAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryAndIChangedTheDataInLogFieldAToAnotherBadDataAndTheQueryIsThenClosedIfIThenEnteredTheOriginalBadDataInLogFieldAThenTheSystemShouldRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-04D As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query and I changed the data in log field A to another bad data, and the query is then closed, if I then entered the original bad data in log field A, then the system should refire a query on log field B. Query with requires response = false and requires manual close = true.", new string[] {
                        "PB-US12940-04D"});
#line 671
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table123.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table123.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table123.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 673
 testRunner.And("I create a Subject", ((string)(null)), table123);
#line 678
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table124.AddRow(new string[] {
                        "Log Field 10",
                        ""});
            table124.AddRow(new string[] {
                        "Log Field 11",
                        "data11"});
            table124.AddRow(new string[] {
                        "Log Field 12",
                        "data12"});
#line 679
 testRunner.And("I enter data in CRF and save", ((string)(null)), table124);
#line 684
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table125.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 685
    testRunner.And("I verify Query is displayed", ((string)(null)), table125);
#line 688
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table126.AddRow(new string[] {
                        "Log Field 10",
                        "data10"});
            table126.AddRow(new string[] {
                        "Log Field 11",
                        ""});
#line 689
 testRunner.And("I enter data in CRF and save", ((string)(null)), table126);
#line 693
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table127.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 694
 testRunner.And("I verify Query is displayed", ((string)(null)), table127);
#line 697
 testRunner.And("I take a screenshot");
#line 698
 testRunner.And("I close the only Query on Field \"Log Field 12\"");
#line 699
 testRunner.And("I save the CRF page");
#line 700
 testRunner.And("I open log line 1");
#line 701
 testRunner.And("I verify closed Query with message \"Answer must be provided. Please review.\" is d" +
                    "isplayed on Field \"Log Field 12\"");
#line 702
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table128.AddRow(new string[] {
                        "Log Field 10",
                        ""});
            table128.AddRow(new string[] {
                        "Log Field 11",
                        "data11"});
#line 703
 testRunner.When("I enter data in CRF and save", ((string)(null)), table128);
#line 707
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table129.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 708
 testRunner.Then("I verify Query is displayed", ((string)(null)), table129);
#line 711
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-05A As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, if I then entered new bad data in log field A, then the system should refire a query on log field B. Query with requires response = true and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_05AAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedIfIThenEnteredNewBadDataInLogFieldAThenTheSystemShouldRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-05A As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, if I then entered new bad data in log field A, then the system should refire a query on log field B. Query with requires response = true and requires manual close = true.", new string[] {
                        "PB-US12940-05A"});
#line 714
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table130.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table130.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table130.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 716
    testRunner.And("I create a Subject", ((string)(null)), table130);
#line 721
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table131.AddRow(new string[] {
                        "Log Field 1",
                        ""});
            table131.AddRow(new string[] {
                        "Log Field 2",
                        "data2"});
            table131.AddRow(new string[] {
                        "Log Field 3",
                        "data3"});
#line 722
 testRunner.And("I enter data in CRF and save", ((string)(null)), table131);
#line 727
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table132.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 728
 testRunner.And("I verify Query is displayed", ((string)(null)), table132);
#line 731
 testRunner.And("I take a screenshot");
#line 732
 testRunner.And("I answer the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "3\" with \"Data will be changed.\"");
#line 733
 testRunner.And("I save the CRF page");
#line 734
 testRunner.And("I take a screenshot");
#line 735
 testRunner.And("I open log line 1");
#line 736
 testRunner.And("I close the only Query on Field \"Log Field 3\"");
#line 737
 testRunner.And("I save the CRF page");
#line 738
 testRunner.And("I open log line 1");
#line 739
 testRunner.And("I verify closed Query with message \"Answer must be provided. Please review.\" is d" +
                    "isplayed on Field \"Log Field 3\"");
#line 740
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table133.AddRow(new string[] {
                        "Log Field 1",
                        "data1"});
            table133.AddRow(new string[] {
                        "Log Field 2",
                        ""});
#line 741
 testRunner.When("I enter data in CRF and save", ((string)(null)), table133);
#line 745
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table134.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 746
 testRunner.Then("I verify Query is displayed", ((string)(null)), table134);
#line 749
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-05B As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, if I then entered new bad data in log field A, then the system should refire a query on log field B. Query with requires response = false and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_05BAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedIfIThenEnteredNewBadDataInLogFieldAThenTheSystemShouldRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-05B As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, if I then entered new bad data in log field A, then the system should refire a query on log field B. Query with requires response = false and requires manual close = false.", new string[] {
                        "PB-US12940-05B"});
#line 752
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table135.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table135.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table135.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 754
    testRunner.And("I create a Subject", ((string)(null)), table135);
#line 759
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table136.AddRow(new string[] {
                        "Log Field 4",
                        ""});
            table136.AddRow(new string[] {
                        "Log Field 5",
                        "data5"});
            table136.AddRow(new string[] {
                        "Log Field 6",
                        "data6"});
#line 760
 testRunner.And("I enter data in CRF and save", ((string)(null)), table136);
#line 765
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table137.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 766
 testRunner.And("I verify Query is displayed", ((string)(null)), table137);
#line 769
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table138.AddRow(new string[] {
                        "Log Field 4",
                        "data4"});
            table138.AddRow(new string[] {
                        "Log Field 5",
                        ""});
#line 770
 testRunner.When("I enter data in CRF and save", ((string)(null)), table138);
#line 774
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table139.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 775
 testRunner.Then("I verify Query is displayed", ((string)(null)), table139);
#line 778
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-05C As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, if I then entered new bad data in log field A, then the system should refire a query on log field B. Query with requires response = true and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_05CAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedIfIThenEnteredNewBadDataInLogFieldAThenTheSystemShouldRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-05C As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, if I then entered new bad data in log field A, then the system should refire a query on log field B. Query with requires response = true and requires manual close = false.", new string[] {
                        "PB-US12940-05C"});
#line 781
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table140.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table140.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table140.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 783
    testRunner.And("I create a Subject", ((string)(null)), table140);
#line 788
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table141.AddRow(new string[] {
                        "Log Field 7",
                        ""});
            table141.AddRow(new string[] {
                        "Log Field 8",
                        "data8"});
            table141.AddRow(new string[] {
                        "Log Field 9",
                        "data9"});
#line 789
 testRunner.And("I enter data in CRF and save", ((string)(null)), table141);
#line 794
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table142.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 795
    testRunner.And("I verify Query is displayed", ((string)(null)), table142);
#line 798
 testRunner.And("I take a screenshot");
#line 799
 testRunner.And("I answer the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "9\" with \"Data will be changed.\"");
#line 800
 testRunner.And("I save the CRF page");
#line 801
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table143.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "true",
                        "true"});
#line 802
    testRunner.And("I verify Query is not displayed", ((string)(null)), table143);
#line 805
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table144.AddRow(new string[] {
                        "Log Field 7",
                        "data7"});
            table144.AddRow(new string[] {
                        "Log Field 8",
                        ""});
#line 806
 testRunner.When("I enter data in CRF and save", ((string)(null)), table144);
#line 810
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table145.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 811
 testRunner.Then("I verify Query is displayed", ((string)(null)), table145);
#line 814
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-05D As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, if I then entered new bad data in log field A, then the system should refire a query on log field B. Query with requires response = false and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_05DAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndIAnsweredTheQueryWithoutChangingTheDataAndTheQueryIsThenClosedIfIThenEnteredNewBadDataInLogFieldAThenTheSystemShouldRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-05D As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I answered the query without changing the data, and the query is then closed, if I then entered new bad data in log field A, then the system should refire a query on log field B. Query with requires response = false and requires manual close = true.", new string[] {
                        "PB-US12940-05D"});
#line 817
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table146.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table146.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table146.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 819
 testRunner.And("I create a Subject", ((string)(null)), table146);
#line 824
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table147.AddRow(new string[] {
                        "Log Field 10",
                        ""});
            table147.AddRow(new string[] {
                        "Log Field 11",
                        "data11"});
            table147.AddRow(new string[] {
                        "Log Field 12",
                        "data12"});
#line 825
 testRunner.And("I enter data in CRF and save", ((string)(null)), table147);
#line 830
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table148.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 831
 testRunner.And("I verify Query is displayed", ((string)(null)), table148);
#line 834
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table149.AddRow(new string[] {
                        "Log Field 10",
                        "data10"});
            table149.AddRow(new string[] {
                        "Log Field 11",
                        ""});
#line 835
 testRunner.When("I enter data in CRF and save", ((string)(null)), table149);
#line 839
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table150.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 840
 testRunner.Then("I verify Query is displayed", ((string)(null)), table150);
#line 843
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-06A As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_06AAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndICanceledTheQueryAndIEnteredGoodDataInLogFieldAIfIThenEnteredTheSameBadDataInLogFieldAAsWhenTheQueryWasCanceledThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-06A As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = true.", new string[] {
                        "PB-US12940-06A"});
#line 846
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table151.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table151.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table151.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 848
    testRunner.And("I create a Subject", ((string)(null)), table151);
#line 853
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table152.AddRow(new string[] {
                        "Log Field 1",
                        ""});
            table152.AddRow(new string[] {
                        "Log Field 2",
                        "data2"});
            table152.AddRow(new string[] {
                        "Log Field 3",
                        "data3"});
#line 854
 testRunner.And("I enter data in CRF and save", ((string)(null)), table152);
#line 859
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table153.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 860
 testRunner.And("I verify Query is displayed", ((string)(null)), table153);
#line 863
 testRunner.And("I take a screenshot");
#line 864
 testRunner.And("I cancel the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "3\"");
#line 865
 testRunner.And("I save the CRF page");
#line 866
 testRunner.And("I open log line 1");
#line 867
 testRunner.And("I click audit on Field \"Log Field 3\"");
#line 868
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                        "Audit Type",
                        "Query Message"});
            table154.AddRow(new string[] {
                        "Query Canceled",
                        "Answer must be provided. Please review."});
#line 869
 testRunner.And("I verify Audits exist", ((string)(null)), table154);
#line 872
 testRunner.And("I select Form \"Form 6\" in \"Header\"");
#line 873
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table155.AddRow(new string[] {
                        "Log Field 1",
                        "data1"});
#line 874
 testRunner.And("I enter data in CRF and save", ((string)(null)), table155);
#line 877
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table156.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 878
    testRunner.And("I verify Query is not displayed", ((string)(null)), table156);
#line 881
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table157.AddRow(new string[] {
                        "Log Field 1",
                        ""});
#line 882
 testRunner.When("I enter data in CRF and save", ((string)(null)), table157);
#line 885
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table158.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 886
 testRunner.Then("I verify Query is not displayed", ((string)(null)), table158);
#line 889
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-06B As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_06BAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndICanceledTheQueryAndIEnteredGoodDataInLogFieldAIfIThenEnteredTheSameBadDataInLogFieldAAsWhenTheQueryWasCanceledThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-06B As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = false.", new string[] {
                        "PB-US12940-06B"});
#line 892
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table159.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table159.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table159.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 894
    testRunner.And("I create a Subject", ((string)(null)), table159);
#line 899
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table160.AddRow(new string[] {
                        "Log Field 4",
                        ""});
            table160.AddRow(new string[] {
                        "Log Field 5",
                        "data5"});
            table160.AddRow(new string[] {
                        "Log Field 6",
                        "data6"});
#line 900
 testRunner.And("I enter data in CRF and save", ((string)(null)), table160);
#line 905
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table161.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 906
 testRunner.And("I verify Query is displayed", ((string)(null)), table161);
#line 909
 testRunner.And("I take a screenshot");
#line 910
 testRunner.And("I cancel the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "6\"");
#line 911
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message"});
            table162.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review."});
#line 912
 testRunner.And("I verify Query is cancelled", ((string)(null)), table162);
#line 915
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table163.AddRow(new string[] {
                        "Log Field 4",
                        "data4"});
#line 916
 testRunner.And("I enter data in CRF and save", ((string)(null)), table163);
#line 919
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table164.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 920
    testRunner.And("I verify Query is not displayed", ((string)(null)), table164);
#line 923
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table165.AddRow(new string[] {
                        "Log Field 4",
                        ""});
#line 924
 testRunner.When("I enter data in CRF and save", ((string)(null)), table165);
#line 927
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table166.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 928
 testRunner.Then("I verify Query is not displayed", ((string)(null)), table166);
#line 931
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-06C As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_06CAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndICanceledTheQueryAndIEnteredGoodDataInLogFieldAIfIThenEnteredTheSameBadDataInLogFieldAAsWhenTheQueryWasCanceledThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-06C As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = false.", new string[] {
                        "PB-US12940-06C"});
#line 934
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table167.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table167.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table167.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 936
    testRunner.And("I create a Subject", ((string)(null)), table167);
#line 941
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table168.AddRow(new string[] {
                        "Log Field 7",
                        ""});
            table168.AddRow(new string[] {
                        "Log Field 8",
                        "data8"});
            table168.AddRow(new string[] {
                        "Log Field 9",
                        "data9"});
#line 942
 testRunner.And("I enter data in CRF and save", ((string)(null)), table168);
#line 947
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table169.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 948
 testRunner.And("I verify Query is displayed", ((string)(null)), table169);
#line 951
 testRunner.And("I take a screenshot");
#line 952
 testRunner.And("I cancel the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "9\"");
#line 953
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message"});
            table170.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review."});
#line 954
 testRunner.And("I verify Query is cancelled", ((string)(null)), table170);
#line 957
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table171.AddRow(new string[] {
                        "Log Field 7",
                        "data7"});
#line 958
 testRunner.And("I enter data in CRF and save", ((string)(null)), table171);
#line 961
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table172.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 962
 testRunner.And("I verify Query is not displayed", ((string)(null)), table172);
#line 965
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table173.AddRow(new string[] {
                        "Log Field 7",
                        ""});
#line 966
 testRunner.When("I enter data in CRF and save", ((string)(null)), table173);
#line 969
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table174.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 970
 testRunner.Then("I verify Query is not displayed", ((string)(null)), table174);
#line 973
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-06D As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_06DAsAnEDCUserWhenIEnteredBadDataInLogFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndICanceledTheQueryAndIEnteredGoodDataInLogFieldAIfIThenEnteredTheSameBadDataInLogFieldAAsWhenTheQueryWasCanceledThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-06D As an EDC user, when I entered bad data in log field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field A, if I then entered the same bad data in log field A as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = true.", new string[] {
                        "PB-US12940-06D"});
#line 976
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table175.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table175.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table175.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 978
 testRunner.And("I create a Subject", ((string)(null)), table175);
#line 983
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table176.AddRow(new string[] {
                        "Log Field 10",
                        ""});
            table176.AddRow(new string[] {
                        "Log Field 11",
                        "data11"});
            table176.AddRow(new string[] {
                        "Log Field 12",
                        "data12"});
#line 984
 testRunner.And("I enter data in CRF and save", ((string)(null)), table176);
#line 989
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table177.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 990
 testRunner.And("I verify Query is displayed", ((string)(null)), table177);
#line 993
 testRunner.And("I take a screenshot");
#line 994
 testRunner.And("I cancel the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "12\"");
#line 995
    testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message"});
            table178.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review."});
#line 996
 testRunner.And("I verify Query is cancelled", ((string)(null)), table178);
#line 999
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table179.AddRow(new string[] {
                        "Log Field 10",
                        "data10"});
#line 1000
 testRunner.And("I enter data in CRF and save", ((string)(null)), table179);
#line 1003
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table180.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1004
    testRunner.And("I verify Query is not displayed", ((string)(null)), table180);
#line 1007
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table181.AddRow(new string[] {
                        "Log Field 10",
                        ""});
#line 1008
 testRunner.When("I enter data in CRF and save", ((string)(null)), table181);
#line 1011
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table182.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1012
 testRunner.Then("I verify Query is not displayed", ((string)(null)), table182);
#line 1015
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-07A As an EDC user, when I entered bad data in field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_07AAsAnEDCUserWhenIEnteredBadDataInFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndICanceledTheQueryAndIEnteredGoodDataInLogFieldBIfIThenEnteredTheSameBadDataInLogFieldBAsWhenTheQueryWasCanceledThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-07A As an EDC user, when I entered bad data in field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = true.", new string[] {
                        "PB-US12940-07A"});
#line 1018
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table183.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table183.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table183.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 1020
    testRunner.And("I create a Subject", ((string)(null)), table183);
#line 1025
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table184.AddRow(new string[] {
                        "Log Field 1",
                        "data1"});
            table184.AddRow(new string[] {
                        "Log Field 2",
                        "data2"});
            table184.AddRow(new string[] {
                        "Log Field 3",
                        ""});
#line 1026
 testRunner.And("I enter data in CRF and save", ((string)(null)), table184);
#line 1031
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table185.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1032
 testRunner.And("I verify Query is displayed", ((string)(null)), table185);
#line 1035
 testRunner.And("I take a screenshot");
#line 1036
 testRunner.And("I cancel the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "3\"");
#line 1044
 testRunner.And("I save the CRF page");
#line 1045
 testRunner.And("I open log line 1");
#line 1046
 testRunner.And("I click audit on Field \"Log Field 3\"");
#line 1047
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        "Audit Type",
                        "Query Message"});
            table186.AddRow(new string[] {
                        "Query Canceled",
                        "Answer must be provided. Please review."});
#line 1048
 testRunner.And("I verify Audits exist", ((string)(null)), table186);
#line 1051
 testRunner.And("I select Form \"Form 6\" in \"Header\"");
#line 1054
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table187.AddRow(new string[] {
                        "Log Field 3",
                        "data3"});
#line 1055
 testRunner.And("I enter data in CRF and save", ((string)(null)), table187);
#line 1058
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table188.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1059
 testRunner.And("I verify Query is not displayed", ((string)(null)), table188);
#line 1062
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table189.AddRow(new string[] {
                        "Log Field 3",
                        ""});
#line 1063
 testRunner.When("I enter data in CRF and save", ((string)(null)), table189);
#line 1066
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table190.AddRow(new string[] {
                        "Log Field 3",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1067
 testRunner.Then("I verify Query is not displayed", ((string)(null)), table190);
#line 1070
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-07B As an EDC user, when I entered bad data in field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_07BAsAnEDCUserWhenIEnteredBadDataInFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndICanceledTheQueryAndIEnteredGoodDataInLogFieldBIfIThenEnteredTheSameBadDataInLogFieldBAsWhenTheQueryWasCanceledThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-07B As an EDC user, when I entered bad data in field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = false.", new string[] {
                        "PB-US12940-07B"});
#line 1073
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table191.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table191.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table191.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 1075
    testRunner.And("I create a Subject", ((string)(null)), table191);
#line 1080
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table192.AddRow(new string[] {
                        "Log Field 4",
                        "data4"});
            table192.AddRow(new string[] {
                        "Log Field 5",
                        "data5"});
            table192.AddRow(new string[] {
                        "Log Field 6",
                        ""});
#line 1081
 testRunner.And("I enter data in CRF and save", ((string)(null)), table192);
#line 1086
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table193.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1087
    testRunner.And("I verify Query is displayed", ((string)(null)), table193);
#line 1090
 testRunner.And("I take a screenshot");
#line 1091
 testRunner.And("I cancel the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "6\"");
#line 1096
  testRunner.And("I save the CRF page");
#line 1097
 testRunner.And("I open log line 1");
#line 1098
 testRunner.And("I click audit on Field \"Log Field 6\"");
#line 1099
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        "Audit Type",
                        "Query Message"});
            table194.AddRow(new string[] {
                        "Query Canceled",
                        "Answer must be provided. Please review."});
#line 1100
 testRunner.And("I verify Audits exist", ((string)(null)), table194);
#line 1104
 testRunner.And("I select Form \"Form 6\" in \"Header\"");
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table195.AddRow(new string[] {
                        "Log Field 6",
                        "data6"});
#line 1105
 testRunner.And("I enter data in CRF and save", ((string)(null)), table195);
#line 1108
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table196.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1109
    testRunner.And("I verify Query is not displayed", ((string)(null)), table196);
#line 1112
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table197.AddRow(new string[] {
                        "Log Field 6",
                        ""});
#line 1113
 testRunner.When("I enter data in CRF and save", ((string)(null)), table197);
#line 1116
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table198.AddRow(new string[] {
                        "Log Field 6",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1117
 testRunner.Then("I verify Query is not displayed", ((string)(null)), table198);
#line 1120
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-07C As an EDC user, when I entered bad data in field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = false.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_07CAsAnEDCUserWhenIEnteredBadDataInFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndICanceledTheQueryAndIEnteredGoodDataInLogFieldBIfIThenEnteredTheSameBadDataInLogFieldBAsWhenTheQueryWasCanceledThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseTrueAndRequiresManualCloseFalse_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-07C As an EDC user, when I entered bad data in field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = true and requires manual close = false.", new string[] {
                        "PB-US12940-07C"});
#line 1123
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table199.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table199.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table199.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 1125
    testRunner.And("I create a Subject", ((string)(null)), table199);
#line 1130
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table200.AddRow(new string[] {
                        "Log Field 7",
                        "data7"});
            table200.AddRow(new string[] {
                        "Log Field 8",
                        "data8"});
            table200.AddRow(new string[] {
                        "Log Field 9",
                        ""});
#line 1131
 testRunner.And("I enter data in CRF and save", ((string)(null)), table200);
#line 1136
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table201.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1137
 testRunner.And("I verify Query is displayed", ((string)(null)), table201);
#line 1140
 testRunner.And("I take a screenshot");
#line 1141
 testRunner.And("I cancel the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "9\"");
#line 1147
  testRunner.And("I save the CRF page");
#line 1148
 testRunner.And("I open log line 1");
#line 1149
 testRunner.And("I click audit on Field \"Log Field 9\"");
#line 1150
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                        "Audit Type",
                        "Query Message"});
            table202.AddRow(new string[] {
                        "Query Canceled",
                        "Answer must be provided. Please review."});
#line 1151
 testRunner.And("I verify Audits exist", ((string)(null)), table202);
#line 1155
 testRunner.And("I select Form \"Form 6\" in \"Header\"");
#line hidden
            TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table203.AddRow(new string[] {
                        "Log Field 9",
                        "data9"});
#line 1156
 testRunner.And("I enter data in CRF and save", ((string)(null)), table203);
#line 1159
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table204.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1160
 testRunner.And("I verify Query is not displayed", ((string)(null)), table204);
#line 1163
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table205.AddRow(new string[] {
                        "Log Field 9",
                        ""});
#line 1164
 testRunner.When("I enter data in CRF and save", ((string)(null)), table205);
#line 1167
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table206.AddRow(new string[] {
                        "Log Field 9",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1168
 testRunner.Then("I verify Query is not displayed", ((string)(null)), table206);
#line 1171
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"PB-US12940-07D As an EDC user, when I entered bad data in field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = true.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "QueryRefiringLogic_LogForm_MultiFldEC")]
        public virtual void PB_US12940_07DAsAnEDCUserWhenIEnteredBadDataInFieldAAndLogFieldBThatResultedInTheSystemOpeningAQueryOnLogFieldBAndICanceledTheQueryAndIEnteredGoodDataInLogFieldBIfIThenEnteredTheSameBadDataInLogFieldBAsWhenTheQueryWasCanceledThenTheSystemShouldNotRefireAQueryOnLogFieldB_QueryWithRequiresResponseFalseAndRequiresManualCloseTrue_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"PB-US12940-07D As an EDC user, when I entered bad data in field A and log field B that resulted in the system opening a query on log field B, and I canceled the query, and I entered good data in log field B, if I then entered the same bad data in log field B as when the query was canceled, then the system should not refire a query on log field B. Query with requires response = false and requires manual close = true.", new string[] {
                        "PB-US12940-07D"});
#line 1174
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table207.AddRow(new string[] {
                        "Subject Number",
                        "{RndNum<num1>(5)}"});
            table207.AddRow(new string[] {
                        "Subject Initials",
                        "SUB"});
            table207.AddRow(new string[] {
                        "Subject ID",
                        "SUB {Var(num1)}"});
#line 1176
 testRunner.And("I create a Subject", ((string)(null)), table207);
#line 1181
 testRunner.And("I select Form \"Form 6\"");
#line hidden
            TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table208.AddRow(new string[] {
                        "Log Field 10",
                        "data10"});
            table208.AddRow(new string[] {
                        "Log Field 11",
                        "data11"});
            table208.AddRow(new string[] {
                        "Log Field 12",
                        ""});
#line 1182
 testRunner.And("I enter data in CRF and save", ((string)(null)), table208);
#line 1187
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table209.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1188
    testRunner.And("I verify Query is displayed", ((string)(null)), table209);
#line 1191
 testRunner.And("I take a screenshot");
#line 1192
 testRunner.And("I cancel the Query \"Answer must be provided. Please review.\" on Field \"Log Field " +
                    "12\"");
#line 1198
  testRunner.And("I save the CRF page");
#line 1199
 testRunner.And("I open log line 1");
#line 1200
 testRunner.And("I click audit on Field \"Log Field 12\"");
#line 1201
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                        "Audit Type",
                        "Query Message"});
            table210.AddRow(new string[] {
                        "Query Canceled",
                        "Answer must be provided. Please review."});
#line 1202
 testRunner.And("I verify Audits exist", ((string)(null)), table210);
#line 1206
 testRunner.And("I select Form \"Form 6\" in \"Header\"");
#line hidden
            TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table211.AddRow(new string[] {
                        "Log Field 12",
                        "data12"});
#line 1207
 testRunner.And("I enter data in CRF and save", ((string)(null)), table211);
#line 1210
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table212.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1211
    testRunner.And("I verify Query is not displayed", ((string)(null)), table212);
#line 1214
 testRunner.And("I take a screenshot");
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Data"});
            table213.AddRow(new string[] {
                        "Log Field 12",
                        ""});
#line 1215
 testRunner.When("I enter data in CRF and save", ((string)(null)), table213);
#line 1218
 testRunner.And("I open log line 1");
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Query Message",
                        "Answered",
                        "Closed"});
            table214.AddRow(new string[] {
                        "Log Field 12",
                        "Answer must be provided. Please review.",
                        "false",
                        "false"});
#line 1219
 testRunner.Then("I verify Query is not displayed", ((string)(null)), table214);
#line 1222
 testRunner.And("I take a screenshot");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
